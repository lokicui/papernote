%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: <65B0><5EFA> Microsoft Visio <7ED8><56FE> (2).pdf
%%Creator: Adobe Acrobat 11.0.1
%%For: syl
%%CreationDate: 2014/1/20, 11:37:26
%%BoundingBox: 0 0 2325 1617
%%HiResBoundingBox: 0 0 2325 1616.2500
%%CropBox: 0 0 2325 1616.2500
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 943 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-01-20T11:26:30+08:00"
   xmp:CreatorTool="Microsoft® Visio® 2010"
   xmp:ModifyDate="2014-01-20T11:26:30+08:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2010">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>syl</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -1616.25 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1616.25 li
2325 1616.25 li
2325 0 li
cp
clp
gsave
0 1616.25 mo
2325 1616.25 li
2325 -.75 li
0 -.75 li
cp
clp
251.25 339 mo
453.75 339 li
453.75 136.5 li
251.25 136.5 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
251.25 136.5 mo
454.5 136.5 li
454.5 339.75 li
251.25 339.75 li
251.25 136.5 li
cp
252 339 mo
251.25 339 li
453.75 339 li
453.75 136.5 li
453.75 137.25 li
251.25 137.25 li
252 136.5 li
252 339 li
cp
1 /0 /CSD get_res sepcs
1 sep
ef
.14 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
251.25 136.5 mo
454.5 136.5 li
454.5 339.75 li
251.25 339.75 li
251.25 136.5 li
cp
252 339 mo
251.25 339 li
453.75 339 li
453.75 136.5 li
453.75 137.25 li
251.25 137.25 li
252 136.5 li
252 339 li
cp
@
%ADOBeginSubsetFont: PBAAAA+VERDANA Initial
ct_T42Dict begin
-0.559 -0.301 1.445 1.051
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+VERDANA
Type42DictBegin
[<00010000000c000c000c000c4f532f3272527bbf000000cc000000606376
74204ca241020000012c000001986670676da4ce6d51000002c4000002ba
676c79665e7355a0000021e4000038b668656164da7765b6000005800000
0036686865610f27084e000005b800000024686d7478d4bb1879000005dc
0000082a6c6f63611fa72f7200000e08000007706d617870062b03610000
1578000000206e616d659bb179b5000015980000094d707265700870ef40
00001ee8000002fc67646972000000000000000000000000000204110190
00050008059a053300000125059a0533000003a0007802a70800020b0604
030504040204a10006ff4000205b00000010000000004d53202000400020
00a0061efe5900ca080b01ae2000019f00000000045d05d1000000200001
061e061405f005d1047c045d03dd00100000ffe7ffe1fe78fe64fe590394
001f0000009600aa00b900c600ce000000000000000000bc00c200000000
007600b200c000cb0000000000000000000000000081009400a600cc00da
00ef00000000000000000098009e00ab00b0000000000000000000000000
00900098009e00a400a900ae00b300ba00c3000000880091009800a500ac
00000000000000000000006f0087008f009b00a000d3011d000000000000
00c3021401c20000000000e9000c02d10173018e001a002c0044005c0073
007e008600b200c8014c001a003d00440050005c00720078009200b200b9
00c8000000000000000000000000000000000000003d0056005d006a006e
00b100b900c100000000002a003d00540064006a00b100b9000000000000
0071007a008900a100a700bb006f007a00870091009a0000000000000000
00000000000000000000008102210221007400e500b900ca019502c600ac
00a700850614000a000005d1001f0000045d001f00000000ffe10000fe64
fff50000036202f402a2029100af026a004c401555543736322f2e2d2c26
251f141312110d0c0504022c20b003254523452361688a204568208a2344
60442d2c4b525845441b2121592d2c202045684420b001602045b0467668
188a4560442d2cb0122bb0022545b00225456ab0408b60b0022523442121
212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121212d2c
2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361
592d2cb100032545685458b0032545b0032545606820b004252344b00425
23441bb00325204568208a2344b00325456860b003252344592d2cb00325
204568208a2344b00325456860b0032523442d2cb00943588721c01bb012
43588745b0112bb0472344b0477ae41b038a45186920b04723448a8a8720
b0a05158b0112bb0472344b0477ae41b21b0477ae4595959182d2c4b5258
45441b2121592d2c462346608a8a462320468a608a61b8ff806223201023
8ab14b4b8a70456020b0005058b00161b8ffba8b1bb0468c59b010606801
3a2d2c2045b003254652583f1b2111592d2c21210c6423648bb84000622d
2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c0
51580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb840
00626023212d2cb0134358031b02592d2c4b53234b515a5820458a60441b
2121592d2c4b53234b515a58381b2121592d2cb1020042b123018851b140
0188535a58b910000020885458b202010243604259b12401885158b92000
0040885458b2020202436042b12401885458b2022002436042004b014b52
58b2020802436042591bb940000080885458b202040243604259b9400000
8063b80100885458b202080243604259b94000010063b80200885458b202
100243604259b94000020063b80400885458b20240024360425959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00000001
000000050ccda98be7525f0f3cf5001b080000000000aa7e442900000000
c9acc9c7fb86fd930b93086800000009000200000000000000010000080b
fe5200000c2cfb86fd710b9300010000000000000000000000000000005e
080001000000000002d0000002d000000326012303ac00a8000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000516008905160116051600a10000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000057c
00c805960073062a00c8050f00c8049900c80000000000000000035e0089
0000000000000000047400c806be00c800000000064c007300000000064c
0073059000c80578008604ee0000000000000578001a07e9005c00000000
000000000000000000000000000000000000000000000000000000000000
000004ce006804fc00b9042b006904fc006c04c4006a02d0004404fc006c
051000b9023200af0000000004bc00c1023200bb07c800b9051000b904db
006a04fc00b900000000036a00b9042b006e0327003e051000b100000000
0000000004bc003c04bc003d000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000001f001f001f
001f0064008d008d008d008d008d008d008d008d008d008d008d008d008d
008d0120019a024c024c024c024c024c024c024c024c024c024c024c024c
024c024c024c024c033d03c5046304ca053505350535059b059b059b05ec
06c906c9078607860859091c0a080a690a690add0b7a0b7a0b7a0b7a0b7a
0b7a0b7a0b7a0b7a0b7a0caf0d870e2b0f040fbd105c1168124012ff12ff
13a1142015d216a517721852185218db19eb1a7a1b461b461b461be21c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b0001000003b7003400030000000000020010002f00560000
020a02fc000000000000002e022e00010000000000000032000000010000
000000010007003200010000000000020007007f00010000000000030032
006d0001000000000004000700320001000000000005000c008700010000
00000006000700320001000000000007003b00320001000000000009000e
009f000100000000000d014c00ad000100000000000e002a01f900030001
04030002000c02230003000104050002001002330003000104060002000c
024300030001040700020010024f00030001040800020010025f00030001
040900000064026f0003000104090001000e02d30003000104090002000e
036d0003000104090003006403490003000104090004000e02d300030001
040900050018037d0003000104090006000e02d300030001040900070076
02d30003000104090009001c03ad000300010409000d029803c900030001
0409000e0054066100030001040a0002000c022300030001040b00020010
06b500030001040c0002000c022300030001040e0002000c06c500030001
04100002000e06d50003000104130002001206e30003000104140002000c
02230003000104150002001002230003000104160002000c022300030001
04190002000e06f500030001041b0002001006c500030001041d0002000c
022300030001041f0002000c02230003000104240002000e070300030001
042d0002000e071100030001080a0002000c02230003000108160002000c
0223000300010c0a0002000c0223000300010c0c0002000c0223a9203230
3131204d6963726f736f667420436f72706f726174696f6e2e20416c6c20
5269676874732052657365727665642e56657264616e6120697320612074
726164656d61726b206f6620746865204d6963726f736f66742067726f75
70206f6620636f6d70616e6965732e4d6963726f736f66743a5665726461
6e6120526567756c61723a56657273696f6e20352e303320284d6963726f
736f6674294d61747468657720436172746572596f75206d617920757365
207468697320666f6e74206173207065726d697474656420627920746865
2045554c4120666f72207468652070726f6475637420696e207768696368
207468697320666f6e7420697320696e636c7564656420746f2064697370
6c617920616e64207072696e7420636f6e74656e742e20596f75206d6179
206f6e6c792028692920656d626564207468697320666f6e7420696e2063
6f6e74656e74206173207065726d69747465642062792074686520656d62
656464696e67207265737472696374696f6e7320696e636c756465642069
6e207468697320666f6e743b20616e6420286969292074656d706f726172
696c7920646f776e6c6f6164207468697320666f6e7420746f2061207072
696e746572206f72206f74686572206f7574707574206465766963652074
6f2068656c70207072696e7420636f6e74656e742e687474703a2f2f7777
772e6d6963726f736f66742e636f6d2f7479706f6772617068792f666f6e
74732f004e006f0072006d0061006c006e0079006f00620079010d006500
6a006e00e9006e006f0072006d0061006c005300740061006e0064006100
720064039a03b103bd03bf03bd03b903ba03ac00a9002000320030003100
310020004d006900630072006f0073006f0066007400200043006f007200
70006f0072006100740069006f006e002e00200041006c006c0020005200
690067006800740073002000520065007300650072007600650064002e00
560065007200640061006e00610020006900730020006100200074007200
6100640065006d00610072006b0020006f00660020007400680065002000
4d006900630072006f0073006f00660074002000670072006f0075007000
20006f006600200063006f006d00700061006e006900650073002e004d00
6900630072006f0073006f00660074003a00560065007200640061006e00
6100200052006500670075006c00610072003a0056006500720073006900
6f006e00200035002e0030003500200028004d006900630072006f007300
6f006600740029004d006100740074006800650077002000430061007200
74006500720059006f00750020006d006100790020007500730065002000
7400680069007300200066006f006e007400200061007300200070006500
72006d006900740074006500640020006200790020007400680065002000
450055004c004100200066006f0072002000740068006500200070007200
6f006400750063007400200069006e002000770068006900630068002000
7400680069007300200066006f006e007400200069007300200069006e00
63006c007500640065006400200074006f00200064006900730070006c00
61007900200061006e00640020007000720069006e007400200063006f00
6e00740065006e0074002e00200059006f00750020006d00610079002000
6f006e006c0079002000280069002900200065006d006200650064002000
7400680069007300200066006f006e007400200069006e00200063006f00
6e00740065006e00740020006100730020007000650072006d0069007400
7400650064002000620079002000740068006500200065006d0062006500
6400640069006e0067002000720065007300740072006900630074006900
6f006e007300200069006e0063006c007500640065006400200069006e00
20007400680069007300200066006f006e0074003b00200061006e006400
200028006900690029002000740065006d0070006f007200610072006900
6c007900200064006f0077006e006c006f00610064002000740068006900
7300200066006f006e007400200074006f00200061002000700072006900
6e0074006500720020006f00720020006f00740068006500720020006f00
750074007000750074002000640065007600690063006500200074006f00
2000680065006c00700020007000720069006e007400200063006f006e00
740065006e0074002e0068007400740070003a002f002f00770077007700
2e006d006900630072006f0073006f00660074002e0063006f006d002f00
7400790070006f006700720061007000680079002f0066006f006e007400
73002f004e006f0072006d00610061006c0069004e006f0072006d00e100
6c006e0065004e006f0072006d0061006c0065005300740061006e006400
61006100720064041e0431044b0447043d044b0439004e00610076006100
64006e006f0041007200720075006e00740061000000b90054ffc0401eb2
29323610b220b240b250b270b280b2a0b2b0b2d0b2e0b20ac0b2f0b202b8
ffc04070b51718361f44010f561f56024f555f55026f54019f54af540251
53170452531604535215044a495204464937044749320448493204493539
043c3f32043d3f3d043e3f2104433f1d04423f5204413f5204403f52043f
35320432336404333534043534540434351e04d034e034f03403b8ffeeb3
b4254836b8ffe0b3b4102336b8ffee400db4090f36b41a480476b386b302
b8fff0b3b3254836b8fffa40ffb3092436b314480489881304706c707802
0f9cdf9e02409d161936409c161b3640971719364096171b368685131f0f
840f850f8e0f8f0f901f841f8e1f8f2f8e808580888f919085908790880f
40820910360f721f72024071090c360f6d0120c80120c7013fc6efc60220
c540c50200620100621062024061a061020f5b012d1411042c1425042b14
39042a141304291415041f141e042120430420143c04c91a45041a1b4704
1b1a3c041a143204151439041314480412141a0411141a04701401401441
43360f0e2a1f0006010dc34b1f0cc24b1f0ac04b1f09c04b1f05bc4b1f04
bd4b1f03b94b1f02ba4b1f01b64b1f00b74b1fc3c22a1fc0bf2a1fbd4056
bc211fbab9211fb7b6211fc2c3c40dbfc0c10dbcbdbe0cb9babb0cb6b7b8
0c10bc80bc0240b980b9020fb63fb64fb67fb6040fb62fb63fb66fb67fb6
bfb6cfb6ffb6080a0937040c0d02050402030202010002500501b801ff01
b0124b004b5442b013014b004b5342b109322b4bb0645242858d8d1db096
4b5258b0801d59b808004b5458b001b0018e59b0084b5358b001b0018e59
002b2b2b2b2b737473732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
b00345b006456861b006234473b00345b00e456861b00e2344b00e45b00f
456861b00f23442b01b0144568b01423442b732b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b7373737373737373732b732b732b2b2b2b2b73732b2b2b2b73
2b2b2b2b00752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73747373
742b73742b2b00>
[14519 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> PBAAAA+VERDANA AddT42Char 
1 2666 44 <00010089000002d505d1000b00a1b90004fffcb40d0d425503b8fffcb40d
0d425504b8fff8b40b0b425503b8fff8b40b0b425504b8fffcb40c0c4255
03b8fffc40270c0c425509043206030a033201080d6d0a080b5a0a140305
025a030c10100255030c0b0b025503b8ffdeb40f0f025503b8ffe4b40909
025503b8fffeb40c0c025503b8ffeeb60d0d0255036d0c10f62b2b2b2b2b
2bf43210fdf43210e6003ffd323ffd323130012b2b2b2b2b2b2121353311
2335211523113302d5fdb4c3c3024cc3c39804a19898fb5f>PBAAAA+VERDANA AddT42Char 
1 5876 68 <00020068ffe1041d04780026003301ceb9001efff8b40c0c42551db8fff0
40420c0c42550c0a0423190a1523042b120c0c06552c120c0c06552d120c
0c0655590e511e5c2c690e601d6f2d7b0a7a14701d7b2c0a0208283d3011
401102111120081cb8ffca40170c0c42554f1c011c1c183f20043141080a
01080f1d011db8fff6b70c0c42551d112702b8fff8b40d0d425502b8fff8
b40b0b425502b8fff0400b0c0c425535400909025502b8fff4b409090255
02b8fff4b40c0c025502b8fff440160c0c0655021a001d0b000610100255
00120b0b025500b8ffe640110f0f0255001809090255001a0d0d025500b8
fffcb40c0c025500b8ffe0400b0f0f065500120c0c065500b8fff4401509
090655000f0d0d06550091350f351f353f35032eb8fff8b40d0d02552eb8
fff440190f0f06552e080c0c06552e040d0d42552e080b0c42552e1b0bb8
fffa4043101002550b0c0b0b02550b080d0d02550b1c090902550b0c0d0d
02550b060c0c02550b16090906550b060c0c06550b0a0d0d06550b0c0c0c
42550b0c0b0b42550b853410f62b2b2b2b2b2b2b2b2b2b2bed2b2b2b2b2b
5d10e62b2b2b2b2b2b2b2b2b2b113910fd2b2b2b2b2b2b2b32322f2b5d00
3f3fed3fed332f5d2b1112392f5ded123931305d2b2b2b015d002b2b2123
350606070606232226353436373624373534262726262322060723353636
3332161716161503110606070606151416333236041dbb1955282f7a5297
d26d6566011ea42d2a28703d4ab6610a37d06576af403f42bb56e9445164
747763a477113d12171fc89b7f9d2d2d20081d40541817102725bf0f2427
2f2e926cfe1d013705141317615560614d00>PBAAAA+VERDANA AddT42Char 
1 6926 70 <00010069ffe703f30477002100df404c0f234f23022b01220e2a1624183a
01350e3a16351849014f0a440e4f1641185901550e6901650e7a01730e13
1010143f0c0421211a3f03090f23401010025523400c0c0255000c0c0c02
5500b8ffdeb40909065500b8ffde40520d0d0655008d2317040d0d425517
040c0c425517080b0b425517060c0c0255171b09080d0d4255090c0b0b42
55090a0c0c425509080d0d025509080c0c0255090c0b0b02550916090902
5509060909065509b8fff8b60d0d065509852210f62b2b2b2b2b2b2b2b2b
ed2b2b2b2b10f62b2b2b2b2b3c003fed332f3fed332f31305d015d250606
232226272626351000333216171523262623220615141633323637363637
3303f35ea95f79ca484950012df760b94d0a56b757a0b9b5a439762f2948
150a462d32474848dc93011201383627d14348d7d0cad91e18152f11>PBAAAA+VERDANA AddT42Char 
1 9344 76 <000200af0000018305db000300070157b90003fff8b40d0d425500b8fff8
b40d0d425506b8fffcb40b0b425505b8fffc40110b0b425507040b0b4255
04040b0b425502b8fff8b40d0d425501b8fff8b40d0d425506b8fff4b40d
0d425505b8fff4b40d0d425507b8fffcb40d0d425504b8fffcb40d0d4255
02b8fff4b40c0c425501b8fff4b40c0c425506b8fff4b40c0c425505b8ff
f440110c0c425507040c0c425504040c0c425501b8ffc040170c0d425501
4402400b0d370203060505087f0901099200b8fffc402c0c0c0255006004
0c09090255040c0c0c0255040609090655040c0c0c0655041a01020f0f02
5501607f050105b8ffdeb41010025505b8ffe0400b0f0f0255050c090902
5505b8ffeeb40d0d025505b8fff6b40c0c025505b8fffcb40909065505b8
ffffb60c0c065505880810f62b2b2b2b2b2b2b5de42bfd2b2b2b2be42be6
5d003f3f3f2bed2b3130012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01
233533032311330183d4d40cbcbc0518c3fa25045d00>PBAAAA+VERDANA AddT42Char 
1 10050 79 <000100bb000001770614000300e5b90002fffcb40b0b425501b8fffc4011
0b0b425503040b0b425500040b0b425502b8fffcb40d0d425501b8fffc40
110d0d425503040d0d425500040d0d425502b8fff4b40c0c425501b8fff4
40370c0c425503040c0c425500040c0c4255020101087f05010592000c09
090255000c0c0c0255000809090655000c0c0c0655001a7f010101b8ffde
b41010025501b8ffe0400b0f0f0255010c0909025501b8ffeeb40d0d0255
01b8fff6400b0c0c025501040909065501b8fff8b60909065501880410f6
2b2b2b2b2b2b2b5dfd2b2b2b2be65d003f3f3130012b2b2b2b2b2b2b2b2b
2b2b2b212311330177bcbc061400>PBAAAA+VERDANA AddT42Char 
1 11172 81 <000100b90000045f047c0016015c401303151615751503100d084213040e
05010d0802b8fff8b40d0d425502b8fff0b40c0c425502b8fff8b40b0b42
5502b8fff4b40909025502b8fff4b40c0c025502b8fff8b40909065502b8
fff4b60c0c0655021a00b8ffeab41010025500b8fffc40170b0b02550004
0f0f025500080909025500220c0c025500b8fffeb40d0d025500b8ffe040
110f0f0655000d0c0c0655000a0d0d065500b8fff8403a09090655009118
1f18601802100b080d0d42550b100c0c42550b080b0b42550b0c0c0c0255
0b0c090902550b08090906550b0c0c0c06550b1a0db8ffdeb4101002550d
b8ffe0b40f0f02550db8ffeeb40d0d02550db8fff6400b0c0c02550d0c09
0902550db8ffea400b0f0f06550d08090906550db8fff1b40c0c06550db8
fff1b60d0d06550d881710f62b2b2b2b2b2b2b2b2bfd2b2b2b2b2b2b2b32
5d10f62b2b2b2b2b2b2b2b2b2bed2b2b2b2b2b2b2b003f3c3f3fed123931
305d2123113426272626232206071123113315363633321615045fbc1218
195e4b4da84dbcbc58bc63b5be027c4d87262a294c3bfcbe045d7c4952da
cd00>PBAAAA+VERDANA AddT42Char 
1 11594 82 <0002006affe10471047c000b00170142401a3b0e341034143b164b0e4410
44144b16080f3f0904153f030a0cb8fffcb40d0d42550cb8fff0b40c0c42
550cb8fff8b40b0b42550cb8fff8b4090902550cb8fff4b40c0c02550cb8
fff2400d0c0c06550c1b19400c0c025500b8fffcb40b0b025500b8ffe040
0b1010025500180c0c025500b8ffdab40f0f065500b8ffeeb40909065500
b8fff6b40c0c065500b8fffa40610d0d06550090190f191f193f196f1904
12040d0d425512080c0c425512080b0b4255120409090255120c0c0c0255
120c0c0c0655121b06080d0d4255060c0b0b4255060a0c0c425506160b0b
025506180909025506080c0c025506040d0d025506b8fffe40190f0f0655
06100909065506040c0c065506040d0d065506851810f62b2b2b2b2b2b2b
2b2b2b2bed2b2b2b2b2b2b5d10f62b2b2b2b2b2b2b2bed2b2b2b2b2b2b00
3fed3fed3130015d01100023220011100033320003342623220615141633
32360471fee8ebedfee90117edeb0118c2aa9799a9aa9896ab022efeeffe
c4013c01110111013dfec3feefd9d3d3d9d2d9d7>PBAAAA+VERDANA AddT42Char 
1 12004 83 <000200b9fe640490047c0013002001554025320239153220430249154220
561267127e087c1c0a0e0906174211040c051e4006090b0c14b8fff8b40b
0b425514b8fffcb40d0d425514b8fff8b40c0c425514b8fff4b40c0c0255
14b8fff6b60c0c0655141b00b8fff0b40b0b025500b8ffd0b41010025500
b8fff0400b0f0f025500120c0c025500b8fff2b40d0d025500b8ffeeb409
09065500b8fff6b40c0c065500b8fff6403b0d0d06550090221f223f2202
0e1b09080b0b425509080d0d425509100c0c4255090c09090255090c0c0c
0255090c09090655090c0c0c0655091a0cb8ffdeb4101002550cb8ffe240
0b0f0f02550c0c090902550cb8fff6b40c0c02550cb8ffeeb40d0d02550c
b8ffee400b0f0f06550c06090906550cb8fff0b40c0c06550cb8ffefb60d
0d06550c882110f62b2b2b2b2b2b2b2b2bfd2b2b2b2b2b2b2b32325d10f4
2b2b2b2b2b2b2b2bed2b2b2b2b2b003f3fed3f3fed12393931305d011406
070606232226271123113315363633321203342623220607111616333236
04904e4742b364578d49bcbc4bbb6acae1c28a8f51a44b5073499db0023c
88e14e4a512628fe2c05f9753f55fecffeeccac84639fd87241ad400>PBAAAA+VERDANA AddT42Char 
1 12726 86 <0001006effe503d704780033018640570602091b1502191b26092a243209
3c2442094c245e055d165321562f54326f056c166020642f6532147a057f
1174207928742b8a01880d851a872894019a1b0b000e1829041e03802201
22400b0b02552222263e1e0407b8ffc0400c0b0b025507070b3e0309210e
b8fffa403d09090255290c0c0c0255290c0c0c065529080b0b425529100c
0c425529040d0d4255291b35400c0c0255181009090255180a0c0c025518
080909065518b8fff6b50c0c0655180eb8fff4b40c0c02550eb8fff4b40c
0c06550eb8fff8b40b0b42550eb8fff0b40c0c42550eb8fffc400b0d0d42
550e1b0021180700b8ffeab40b0b025500b8ffeab41010025500b8fff440
0b0909025500140c0c025500b8ffeeb40909065500b8fff8b40c0c065500
b8fff840270d0d0655008e350f351f353f355f357f350507160b0b025507
1609090655071a0c0c065507863410e62b2b2b5d10e62b2b2b2b2b2b2b11
393910ed2b2b2b2b2b2f2b2b2b2b2bed2b2b2b2b2b2b2f003fed332f2b3f
ed332f2b5d1112173931305d015d01140623222627353316163332363534
272627262627262635343637363633321617152326262322061514171617
16161716171603d7fddb7ccf460a59da647c8c26266c288135937b393a38
ad6b64cd440a48ce63678e2b2a5e34812b834747014299c43b23d3434f50
564222221809180e27976e457a302f373123c935494f4e452323160c180a
1e494a00>PBAAAA+VERDANA AddT42Char 
1 13270 87 <0001003effea02fd059e001b00c740540c051a052b05030b10073e0d0b0a
051b1b173f03094f1d7f1d020e008c1d080d10080b0b425510080d0d4255
10100c0c4255100c09090255100c0c0c0255100409090655100c0c0c0655
101a0a0807400d103707b8ffde40111010025507200f0f0255070c090902
5507b8fff6b40c0c025507b8ffee40110d0d0255071c0f0f065507040909
065507b8fff1400d0c0c065507170d0d065507881c10f62b2b2b2b2b2b2b
2b2b2b3232fd2b2b2b2b2b2b2b322f10f6325d003ffd322f3f3333fd322f
31305d250606232226351123353311331121152111141617161633323637
3302fd357d31abb27f7fbc0184fe7c0818164d4f2e64160a0a0e12b8cb02
529e0141febf9efe0358632b28251b09>PBAAAA+VERDANA AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>PBAAAA+VERDANA AddT42Char 
PBAAAA+VERDANA /CharStrings get begin
/space 3 def
/I 44 def
/a 68 def
/c 70 def
/i 76 def
/l 79 def
/n 81 def
/o 82 def
/p 83 def
/s 86 def
/t 87 def
end
PBAAAA+VERDANA /Encoding get
dup 32 /space put
dup 73 /I put
dup 97 /a put
dup 99 /c put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 115 /s put
dup 116 /t put
pop
end
%ADOEndSubsetFont
/TMYULW+VERDANA /PBAAAA+VERDANA findfont ct_VMDictPut
/TMYULW+VERDANA*1 
[32{/.notdef}rp /space 40{/.notdef}rp /I 23{/.notdef}rp /a /.notdef /c 
5{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o /p 
2{/.notdef}rp /s /t 139{/.notdef}rp]
TMYULW+VERDANA nf
TMYULW+VERDANA*1 [35.9986 0 0 -35.9986 0 0 ]msf
323.44 239.17 mo
(I)sh
338.592 239.17 mo
(n)sh
361.372 239.17 mo
(i)sh
371.25 239.17 mo
(t)sh
385.435 239.17 mo
(i)sh
395.313 239.17 mo
(a)sh
416.933 239.17 mo
(l)sh
426.812 239.17 mo
( )sh
315.03 282.37 mo
(t)sh
329.215 282.37 mo
(o)sh
351.064 282.37 mo
(p)sh
373.493 282.37 mo
(i)sh
383.371 282.37 mo
(c)sh
402.126 282.37 mo
(s)sh
812.25 889.5 mo
1015.5 889.5 li
1015.5 686.25 li
812.25 686.25 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
812.25 686.25 mo
1035 686.25 li
1035 889.5 li
812.25 889.5 li
812.25 686.25 li
cp
813 889.5 mo
813 888.75 li
1034.25 888.75 li
1033.5 889.5 li
1033.5 686.25 li
1034.25 687 li
813 687 li
813 686.25 li
813 889.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
ef
812.25 686.25 mo
1035 686.25 li
1035 889.5 li
812.25 889.5 li
812.25 686.25 li
cp
813 889.5 mo
813 888.75 li
1034.25 888.75 li
1033.5 889.5 li
1033.5 686.25 li
1034.25 687 li
813 687 li
813 686.25 li
813 889.5 li
cp
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TMYULW+VERDANA gcheck setglobal} if
1 2246 40 <000100c80000049d05d1000b009eb70935000610060206b8ffc040300f0f
0255060601053502030a350108040008010800730d0f0d010609080b0b42
5509040c0d42550914010e1010025501b8fffcb40b0b025501b8ffda400b
0f0f025501080909025501b8ffeeb40c0c025501b8ffeab40d0d025501b8
ffe9b40d0d065501b8ffe9b60c0c0655016c0c10f62b2b2b2b2b2b2b2bfd
2b2b325d10f63c5d3c003fed3fed12392f2b71ed31302121112115211121
15211121049dfc2b03d5fcf1030ffcf1030f05d1b0fe68b0fdd7>TMYULW+VERDANA AddT42Char 
1 7254 71 <0002006cffe10443061400130020014a40253c1a301c38204f1a421c4820
58066806701009120102110518410e0401081e42050a111402b8fff8b40d
0d425502b8fff0b40c0c425502b8fff8b40b0b425502b8fff4b409090255
02b8fff4b40c0c025502b8fff4400d0c0c0655021a22400f0f025500b8ff
f640231010025500080b0b025500100f0f0255000c09090255002a0c0c02
55000a0d0d025500b8ffee40510f0f0655000f0c0c0655000f0d0d065500
92221f223f22021b080b0b42551b040d0d42551b100c0c42551b0c0c0c02
551b100c0c06551b1b08080d0d4255080c0b0b4255080a0c0c425508180b
0b025508b8fffe402b0f0f0255080c09090255081009090255080c0c0c02
5508040d0d0255080c0c0c065508080d0d065508852110f62b2b2b2b2b2b
2b2b2b2b2bed2b2b2b2b2b5d10f62b2b2b2b2b2b2b2b2b2bfd2b2b2b2b2b
2b3232003fed3f3fed1239393f31305d2123350606232202113436373636
333216171133031126262322061514163332360443bc51b067c8eb514544
b56158884bbcbc4c78479eb0889650a475464e013401118ede4e4c502527
01e4faff0281221adccac7cf4700>TMYULW+VERDANA AddT42Char 
1 7688 72 <0002006affe60460047c0018001f0106402726042b0d30043b0d3c1e4304
4b0d4b1e5a0d50166a0d6017780d7a1e0e013c1f1f0f1c3d15040bb8ffe8
40190c0c06550b0b073f0f090c0c21400909025521400c0c025519b8fff6
b40c0c025519b8fff0b40c0c425519b8fff8400d0d0d4255191a00200c0c
025500b8fff440680d0d0655008f210f211f213f21031f01040d0d425501
100c0c425501080b0b4255010c0c0c0255010a0c0c0655011b12080d0d42
55120c0b0b4255120a0c0c425512180b0b025512100909025512080c0c02
5512040d0d0255120a0c0c065512020d0d065512852010f62b2b2b2b2b2b
2b2b2bfd2b2b2b2b2b325d10f42b2bed2b2b2b2b2b332f003fed332f2b3f
ed12392fed31305d01211416171616333236373315060623200011100033
321215272626232206070460fcc93e36348f5672e7310a5fc66dfeeafec8
012bf4e2f5b701939697b30c021b67993130305b2ccd2836012d01150112
0142fef8f32a94a2b284>TMYULW+VERDANA AddT42Char 
1 13964 91 <0001003c00000480045d000b00fcb90001ffffb40c0c425509b8ffff4096
0c0c425507010c0c4255090b1b01140314071b09270327073c003b013403
3404340634073b093d0a4c004b0144034404440644074b094d0a5a015503
5a0555075a09550b6f016003690560076f09660b230f0200083f0230084f
0240087d02700808091a0a0b0a071a060506011a000b00031a0405040102
050b080906047a047506020605040809060106020d010502080b04040a00
b8ffc04022091037060001008d0d0f0d010f0d1f0d400d5f0d0406020401
04160b0b025504820c10f62b5d325d5d10f65d2b321117395d2f5d003f3f
5d1217393130018710ed8710ed8710ed8710ed005d015d2b2b2b21230101
23010133010133010480edfec3fec1db01b4fe50ed013b013cdcfe4901ad
fe53022d0230fe5a01a6fdda>TMYULW+VERDANA AddT42Char 
TMYULW+VERDANA /CharStrings get begin
/E 40 def
/d 71 def
/e 72 def
/x 91 def
end
TMYULW+VERDANA /Encoding get
dup 69 /E put
dup 100 /d put
dup 101 /e put
dup 120 /x put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/TMYULW+VERDANA*1 
[32{/.notdef}rp /space 36{/.notdef}rp /E 3{/.notdef}rp /I 23{/.notdef}rp /a 
/.notdef /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n /o /p 2{/.notdef}rp /s /t 3{/.notdef}rp 
/x 135{/.notdef}rp]
TMYULW+VERDANA nf
TMYULW+VERDANA*1 [35.9986 0 0 -35.9986 0 0 ]msf
862.72 789.15 mo
(E)sh
885.483 789.15 mo
(x)sh
906.787 789.15 mo
(p)sh
929.216 789.15 mo
(a)sh
950.836 789.15 mo
(n)sh
973.616 789.15 mo
(e)sh
995.06 789.15 mo
(d)sh
1017.49 789.15 mo
( )sh
876.38 832.35 mo
(t)sh
890.565 832.35 mo
(o)sh
912.414 832.35 mo
(p)sh
934.843 832.35 mo
(i)sh
944.721 832.35 mo
(c)sh
963.476 832.35 mo
(s)sh
699 782.25 mo
731.25 782.25 li
731.25 765.75 li
764.25 798 li
731.25 831 li
731.25 814.5 li
699 814.5 li
699 782.25 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.132174 .451331 .911681 0 cmyk
ef
35.912 560.75 mo
35.912 504.9 81.208 459.6 137.25 459.75 cv
541.5 459.75 li
541.37 459.6 li
597.23 459.6 642.47 504.9 642.75 561 cv
642.75 1067.25 li
642.47 1067.32 li
642.47 1123.17 597.23 1168.41 541.5 1168.5 cv
137.25 1168.5 li
137.06 1168.41 li
81.208 1168.41 35.912 1123.17 36 1067.25 cv
36 561 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
35.912 560.75 mo
35.912 504.9 81.208 459.6 137.25 459.75 cv
541.5 459.75 li
541.37 459.6 li
597.23 459.6 642.47 504.9 642.75 561 cv
642.75 1067.25 li
642.47 1067.32 li
642.47 1123.17 597.23 1168.41 541.5 1168.5 cv
137.25 1168.5 li
137.06 1168.41 li
81.208 1168.41 35.912 1123.17 36 1067.25 cv
36 561 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
166.5 726 mo
506.25 726 li
506.25 539.25 li
166.5 539.25 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
165.75 538.5 mo
507 538.5 li
507 726.75 li
165.75 726.75 li
165.75 538.5 li
cp
166.5 726 mo
166.5 726 li
506.25 726 li
506.25 539.25 li
166.5 539.25 li
166.5 726 li
cp
1 /0 /CSD get_res sepcs
1 sep
ef
165.75 538.5 mo
507 538.5 li
507 726.75 li
165.75 726.75 li
165.75 538.5 li
cp
166.5 726 mo
166.5 726 li
506.25 726 li
506.25 539.25 li
166.5 539.25 li
166.5 726 li
cp
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TMYULW+VERDANA gcheck setglobal} if
1 3032 48 <000100c8000005f605d1000c01804067560a0138023805360a6f0260036f
05600a7f0270037f05700a0b5509560a5a0b0364037403750903050a0203
090602000204400c0c425504620d0d425504401010025504400909025504
400d0d02550004100444045404040404070b0903010708090a0b030502b8
fffcb40c0d425502b8fff8b40b0b425502b8fffa400d0f0f02550214001e
1010025500b8fff4405f0b0b0255000c0f0f0255001009090255000a0c0c
0255001a0d0d025500180d0d0655000c0c0c065500780e0f0e1f0e500e03
05080c0c425505040d0d425505080b0b4255050c09090255050c0c0c0255
05040c0c0655051307101010025507b8fffcb40b0b025507b8ffda400b0f
0f025507080909025507b8ffeeb40c0c025507b8ffeab40d0d025507b8ff
eab40d0d065507b8ffeeb60c0c0655076c0d10f62b2b2b2b2b2b2b2bed2b
2b2b2b2b2b5d10f62b2b2b2b2b2b2b2bed2b2b2b111739003f3c3f3c1239
2f5d2b2b2b2b2b435458b434046a04025d59435458b26404015d59121739
3130015d72005d722123110123011123112101012105f6c6fe6276fe65b9
010e018d018001130503fc970369fafd05d1fcc3033d>TMYULW+VERDANA AddT42Char 
1 8912 75 <000100b90000045f061400160166401303151615751503100d084213040e
01010d0802b8fff8b40d0d425502b8fff0b40c0c425502b8fff8b40b0b42
5502b8fff4b40909025502b8fff4b40c0c025502b8fff8b40909065502b8
fff4b60c0c0655021a00b8ffeab41010025500b8fffc40110b0b02550004
0f0f0255000c0909025500b8fffcb40909025500b8fffe400b0d0d025500
220c0c025500b8ffe0b40f0f065500b8fffa404609090655000d0c0c0655
000a0d0d06550091181f18601802100b080d0d42550b100c0c42550b080b
0b42550b0c090902550b0c0c0c02550b08090906550b0c0c0c06550b1a0d
b8ffdeb4101002550db8ffe0400b0f0f02550d0c090902550db8ffeeb40d
0d02550db8fff6b40c0c02550db8ffea400b0f0f06550d08090906550db8
fff1b40c0c06550db8fff1b60d0d06550d881710f62b2b2b2b2b2b2b2b2b
fd2b2b2b2b2b2b2b325d10f62b2b2b2b2b2b2b2b2b2b2bed2b2b2b2b2b2b
2b003f3c3f3fed123931305d212311342627262623220607112311331136
3633321615045fbc1218195e4b4da84dbcbc58bc63b5be027c4d87262a29
4c3bfcbe0614fdcd4952dacd>TMYULW+VERDANA AddT42Char 
1 12452 85 <000100b900000372045d001200d14014000d100d200d030c090f00000443
0a0f05090800b8ffe6b40f0f025500b8fff0403a0d0d0255000014401470
14020c07080b0b425507080d0d425507100c0c4255070c09090255070c0c
0c0255070609090655070c0c0c0655071a09b8ffdeb41010025509b8ffe0
400b0f0f0255090c0909025509b8fff6b40c0c025509b8ffee40110d0d02
5509240f0f0655090a0909065509b8fff8b40c0c065509b8fff9b60d0d06
5509881310f62b2b2b2b2b2b2b2b2bfd2b2b2b2b2b2b2b325d11332f2b2b
003f3f3cfd322f11123931305d0123262623220607112311331536363332
161703720a2a4f3657a24bbcbc70ab59312c2c03900a094d3dfce7045da5
5a4b0507>TMYULW+VERDANA AddT42Char 
TMYULW+VERDANA /CharStrings get begin
/M 48 def
/h 75 def
/r 85 def
end
TMYULW+VERDANA /Encoding get
dup 77 /M put
dup 104 /h put
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/TMYULW+VERDANA*1 
[32{/.notdef}rp /space 36{/.notdef}rp /E 3{/.notdef}rp /I 3{/.notdef}rp /M 
19{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp /h 
/i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef 
/r /s /t 3{/.notdef}rp /x 135{/.notdef}rp]
TMYULW+VERDANA nf
TMYULW+VERDANA*1 [35.9986 0 0 -35.9986 0 0 ]msf
250.63 646.46 mo
(M)sh
280.969 646.46 mo
(e)sh
302.413 646.46 mo
(t)sh
316.598 646.46 mo
(a)sh
338.218 646.46 mo
( )sh
350.873 646.46 mo
(s)sh
369.629 646.46 mo
(e)sh
391.073 646.46 mo
(a)sh
412.693 646.46 mo
(r)sh
428.056 646.46 mo
(c)sh
446.811 646.46 mo
(h)sh
171.75 1060.5 mo
506.25 1060.5 li
506.25 873.75 li
171.75 873.75 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
171.75 873 mo
507 873 li
507 1061.25 li
171.75 1061.25 li
171.75 873 li
cp
172.5 1060.5 mo
171.75 1060.5 li
506.25 1060.5 li
506.25 873.75 li
171.75 873.75 li
172.5 873.75 li
172.5 1060.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
ef
171.75 873 mo
507 873 li
507 1061.25 li
171.75 1061.25 li
171.75 873 li
cp
172.5 1060.5 mo
171.75 1060.5 li
506.25 1060.5 li
506.25 873.75 li
171.75 873.75 li
172.5 873.75 li
172.5 1060.5 li
cp
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TMYULW+VERDANA gcheck setglobal} if
1 4274 53 <000200c80000059805d10010001f011b405408011d012d013a01391d450f
4814481d5a01560f59146f016902600a650b7e01750b110201b300100010
071a3402400d0d425502400d0d025502400d0d0655400201020205183407
030105080f211f2140210311b8fff8400a0b0b425511150f0d010db8fff8
401d090902550d1c0c0c02550d0c0d0d06550d180c0c06550d0d10200001
00b8ffea40220d0d0655001903040c0d425503080b0b425503090c0c0655
031400050e1010025505b8fffcb40b0b025505b8ffda400b0f0f02550508
0909025505b8ffeeb40c0c025505b8ffeab40d0d025505b8fff1b60c0c06
55056c2010f62b2b2b2b2b2b2b32fd2b2b2b322f2b5d39392f2b2b2b2b5d
ed2b5d003f3c3fed12392f5d2b2b2bed123931300187107afd18c0015d21
210121112311213216171616151406071334262726262323113332363736
360598fefffe0efee9c601a187b448515ba28e612d342b7650e9c85e8c31
2d2b0250fdb005d1232d339b77a1d93701a34063221d17fdce212d2a6d00
>TMYULW+VERDANA AddT42Char 
1 10304 80 <000100b900000717047c002b02e3b90007fff8b40b0b425506b8fff8b40b
0b425505b8fff8b40b0b425504b8fff8b40b0b425503b8fff8b40b0b4255
02b8fff8b40b0b425501b8fff8b40b0b425507b8fff8b40d0d425506b8ff
f8b40d0d425505b8fff8b40d0d425504b8fff8b40d0d425503b8fff8b40d
0d425502b8fff8b40d0d425501b8fff8b40d0d425507b8fff0b40c0c4255
06b8fff0b40c0c425505b8fff0b40c0c425504b8fff0b40c0c425503b8ff
f0b40c0c425502b8fff0b40c0c425501b8fff0404f0c0c42550324032913
24132944204426b72a07b62501251f1d1c0817422822041d0501101c0840
2d011f2d302d402d502d702d05000c09090255000c0c0c02550008090906
55000c0c0c0655001a2db8ffc040170f0f02552d400c0c02550118101002
5501080b0b025501b8ffeab40f0f025501b8fff440110909025501300c0c
0255011c0d0d025501b8fff2b40f0f065501b8fff0403d0909065501020d
0d0655016110250b1c0f080b0b42550f080d0d42550f100c0c42550f0c09
0902550f0c0c0c02550f08090906550f0c0c0c06550f1a10b8fff8b40b0b
425510b8fffcb40d0d425510b8fff8b40c0c425510b8fff6400b10100255
10080b0b025510b8ffd240110f0f025510260c0c0255100a0d0d025510b8
fff8b40f0f065510b8fff8b40909065510b8fffbb40c0c065510b8ffff40
330d0d0655101f1a080b0b42551a080d0d42551a100c0c42551a0c090902
551a0c0c0c02551a08090906551a0c0c0c06551a1a1cb8ffdeb410100255
1cb8ffe6400b0f0f02551c0c090902551cb8fff6b40c0c02551cb8ffeeb4
0d0d02551cb8ffee400b0f0f06551c0a090906551cb8fffcb40c0c06551c
b8fffc400e0d0d06551c611f104010801003102f5df42b2b2b2b2b2b2b2b
2bfd2b2b2b2b2b2b2b32102b2b2b2b2b2b2b2b2b2b2b2bfd2b2b2b2b2b2b
2b11393910f42b2b2b2b2b2b2b2b2b2b2bed2b2b2b2b5d5d003f3c3c3f3f
3cfd32111239395d31305d012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b212311342627262623220607161615112311342627262623220607
11231133153636333216173636333216150717bc0d151756514f9e4f0304
bc0d151756514d9b4dbcbc58af63729f2772bc6bb8af027c4886282b2c4f
3d173d1efd35027c4a85282b2b4c3bfcbe045d7c495260556055dfc8>TMYULW+VERDANA AddT42Char 
1 13556 88 <000100b1ffe10457045d0016014e40140b0619077a070302051509051142
050a01081402b8fff8b40b0b425502b8fff8b40d0d425502b8fff0b40c0c
425502b8fff4b40909025502b8fff4b40c0c025502b8fff6b40909065502
b8fff4b60c0c0655021a00b8ffee401d1010025500080f0f025500080909
025500220c0c025500020d0d025500b8ffeab40f0f065500b8fff6404509
090655000d0c0c0655000e0d0d06550092181f186018020b080b0b42550b
080d0d42550b100c0c42550b0c090902550b0c0c0c02550b08090906550b
0c0c0c06550b1a08b8ffe2b41010025508b8ffe6400b0f0f0255080c0909
025508b8fff6b40c0c025508b8fff2b40d0d025508b8fff1400b0f0f0655
08080909065508b8fff1b40c0c065508b8fff5b60d0d065508871710f62b
2b2b2b2b2b2b2b2bed2b2b2b2b2b2b2b5d10f62b2b2b2b2b2b2b2b2bfd2b
2b2b2b2b2b2b32003f3fed3f3c123931305d212335060623222635113311
14161716163332363711330457bc5fae69b0c4bc101a1b565249ad4bbc7c
4b50d7d002d5fd8455792b2c284c3b034200>TMYULW+VERDANA AddT42Char 
TMYULW+VERDANA /CharStrings get begin
/R 53 def
/m 80 def
/u 88 def
end
TMYULW+VERDANA /Encoding get
dup 82 /R put
dup 109 /m put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/TMYULW+VERDANA*1 
[32{/.notdef}rp /space 36{/.notdef}rp /E 3{/.notdef}rp /I 3{/.notdef}rp /M 
4{/.notdef}rp /R 14{/.notdef}rp /a /.notdef /c /d /e 
2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /n /o 
/p /.notdef /r /s /t /u 2{/.notdef}rp /x 
135{/.notdef}rp]
TMYULW+VERDANA nf
TMYULW+VERDANA*1 [35.9986 0 0 -35.9986 0 0 ]msf
296.39 959.38 mo
(R)sh
321.42 959.38 mo
(e)sh
342.865 959.38 mo
(l)sh
352.743 959.38 mo
(a)sh
374.363 959.38 mo
(t)sh
388.548 959.38 mo
(e)sh
409.992 959.38 mo
(d)sh
432.421 959.38 mo
( )sh
262.32 1002.58 mo
(d)sh
284.749 1002.58 mo
(o)sh
306.598 1002.58 mo
(c)sh
325.353 1002.58 mo
(u)sh
348.133 1002.58 mo
(m)sh
383.148 1002.58 mo
(e)sh
404.592 1002.58 mo
(n)sh
427.372 1002.58 mo
(t)sh
441.557 1002.58 mo
(s)sh
298.5 804 mo
315 804 li
315 771.75 li
347.25 771.75 li
347.25 804 li
363.75 804 li
331.5 836.25 li
298.5 804 li
cp
.132174 .451331 .911681 0 cmyk
ef
897.75 127.75 mo
897.75 98.23 921.75 74.23 951 74.25 cv
2132.25 74.25 li
2132.34 74.23 li
2161.85 74.23 2185.85 98.23 2185.5 127.5 cv
2185.5 342 li
2185.85 341.82 li
2185.85 371.34 2161.85 395.34 2132.25 395.25 cv
951 395.25 li
951.26 395.34 li
921.75 395.34 897.75 371.34 897.75 342 cv
897.75 127.5 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
897.75 127.75 mo
897.75 98.23 921.75 74.23 951 74.25 cv
2132.25 74.25 li
2132.34 74.23 li
2161.85 74.23 2185.85 98.23 2185.5 127.5 cv
2185.5 342 li
2185.85 341.82 li
2185.85 371.34 2161.85 395.34 2132.25 395.25 cv
951 395.25 li
951.26 395.34 li
921.75 395.34 897.75 371.34 897.75 342 cv
897.75 127.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1487.25 215.25 mo
1519.5 215.25 li
1519.5 198.75 li
1551.75 231 li
1519.5 264 li
1519.5 247.5 li
1487.25 247.5 li
1487.25 215.25 li
cp
.132174 .451331 .911681 0 cmyk
ef
1056.44 156.91 mo
1056.44 171.31 1132.57 183.01 1226.25 183 cv
1226.4 183.01 li
1320.3 183.01 1396.37 171.31 1396.5 156.75 cv
1396.5 313.5 li
1396.37 313.44 li
1396.37 327.84 1320.3 339.48 1226.25 339.75 cv
1226.4 339.48 li
1132.57 339.48 1056.44 327.84 1056.75 313.5 cv
1056.75 156.75 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1056.44 156.91 mo
1056.44 142.51 1132.57 130.81 1226.25 130.5 cv
1226.4 130.81 li
1320.3 130.81 1396.37 142.51 1396.5 156.75 cv
1396.37 156.91 li
1396.37 171.31 1320.3 183.01 1226.25 183 cv
1226.4 183.01 li
1132.57 183.01 1056.44 171.31 1056.75 156.75 cv
cp
ef
1396.73 156.85 mo
1396.73 156.91 1396.73 156.97 1396.5 156.75 cv
1396.5 158.25 li
1396.55 158.35 li
1396.55 158.35 1396.49 158.41 1396.5 158.25 cv
1395.75 159.75 li
1395.83 159.73 li
1395.83 159.79 1395.83 159.79 1395.75 159.75 cv
1395 161.25 li
1394.69 161.11 li
1394.69 161.17 1394.69 161.17 1395 161.25 cv
1393.5 162.75 li
1391.25 163.5 li
1389 165 li
1386 166.5 li
1383 167.25 li
1380 168.75 li
1376.25 169.5 li
1371.75 171 li
1367.25 171.75 li
1362.75 172.5 li
1357.5 174 li
1352.25 174.75 li
1347 175.5 li
1341 176.25 li
1334.25 177.75 li
1328.25 178.5 li
1321.5 179.25 li
1314.75 179.25 li
1307.25 180 li
1300.5 180.75 li
1293 181.5 li
1284.75 181.5 li
1277.25 182.25 li
1269 182.25 li
1260.75 183 li
1252.5 183 li
1243.5 183 li
1235.25 183 li
1226.25 183 li
1218 183 li
1209 183 li
1200.75 183 li
1192.5 183 li
1184.25 182.25 li
1176 182.25 li
1167.75 181.5 li
1160.25 181.5 li
1152.75 180.75 li
1145.25 180 li
1138.5 179.25 li
1131 179.25 li
1125 178.5 li
1118.25 177.75 li
1112.25 176.25 li
1106.25 175.5 li
1100.25 174.75 li
1095 174 li
1090.5 172.5 li
1085.25 171.75 li
1080.75 171 li
1077 169.5 li
1073.25 168.75 li
1069.5 167.25 li
1066.5 166.5 li
1064.25 165 li
1062 163.5 li
1059.75 162.75 li
1058.25 161.25 li
1058.18 161.17 li
1058.18 161.17 1058.18 161.17 1058.25 161.25 cv
1056.75 159.75 li
1057.04 159.85 li
1057.04 159.79 1057.04 159.79 1056.75 159.75 cv
1056.75 158.25 li
1056.38 158.41 li
1056.32 158.41 1056.32 158.35 1056 158.25 cv
1056 156.75 li
1056.14 156.97 li
1056.08 156.97 1056.08 156.91 1056 156.75 cv
1056 155.25 li
1056.32 155.53 li
1056.32 155.47 1056.32 155.47 1056.75 155.25 cv
1056.75 153.75 li
1057.04 154.09 li
1057.04 154.09 1057.04 154.03 1056.75 153.75 cv
1058.25 153 li
1058.12 152.71 li
1058.18 152.71 1058.18 152.71 1058.25 153 cv
1059.75 151.5 li
1061.25 150 li
1064.25 148.5 li
1066.5 147.75 li
1069.5 146.25 li
1073.25 145.5 li
1077 144 li
1080.75 143.25 li
1085.25 141.75 li
1090.5 141 li
1095 140.25 li
1100.25 138.75 li
1106.25 138 li
1112.25 137.25 li
1118.25 136.5 li
1125 135.75 li
1131 135 li
1138.5 134.25 li
1145.25 133.5 li
1152.75 132.75 li
1160.25 132.75 li
1167.75 132 li
1176 132 li
1184.25 131.25 li
1192.5 131.25 li
1200.75 130.5 li
1209 130.5 li
1218 130.5 li
1226.25 130.5 li
1235.25 130.5 li
1243.5 130.5 li
1252.5 130.5 li
1260.75 131.25 li
1269 131.25 li
1277.25 132 li
1284.75 132 li
1293 132.75 li
1300.5 132.75 li
1307.25 133.5 li
1314.75 134.25 li
1321.5 135 li
1328.25 135.75 li
1334.25 136.5 li
1341 137.25 li
1347 138 li
1352.25 138.75 li
1357.5 140.25 li
1362.75 141 li
1367.25 141.75 li
1371.75 143.25 li
1376.25 144 li
1380 145.5 li
1383 146.25 li
1386 147.75 li
1389 148.5 li
1391.25 150 li
1393.5 151.5 li
1395 153 li
1394.69 152.71 li
1394.69 152.71 1394.69 152.71 1395 153 cv
1395.75 153.75 li
1395.77 154.03 li
1395.83 154.03 1395.83 154.09 1395.75 153.75 cv
1396.5 155.25 li
1396.49 155.41 li
1396.49 155.47 1396.55 155.47 1396.5 155.25 cv
1396.5 156.75 li
cp
1395.75 156 mo
1395.75 156 li
1395 154.5 li
1394.25 153 li
1392.75 152.25 li
1390.5 150.75 li
1389 149.25 li
1386 148.5 li
1383 147 li
1379.25 146.25 li
1375.5 144.75 li
1371.75 144 li
1367.25 142.5 li
1362.75 141.75 li
1357.5 141 li
1352.25 139.5 li
1346.25 138.75 li
1341 138 li
1334.25 137.25 li
1328.25 136.5 li
1321.5 135.75 li
1314.75 135 li
1307.25 134.25 li
1299.75 133.5 li
1292.25 133.5 li
1284.75 132.75 li
1277.25 132 li
1269 132 li
1260.75 132 li
1252.5 131.25 li
1243.5 131.25 li
1235.25 131.25 li
1226.25 131.25 li
1218 131.25 li
1209 131.25 li
1200.75 131.25 li
1192.5 132 li
1184.25 132 li
1176 132 li
1167.75 132.75 li
1160.25 133.5 li
1152.75 133.5 li
1145.25 134.25 li
1138.5 135 li
1131.75 135.75 li
1125 136.5 li
1118.25 137.25 li
1112.25 138 li
1106.25 138.75 li
1101 139.5 li
1095 141 li
1090.5 141.75 li
1085.25 142.5 li
1081.5 144 li
1077 144.75 li
1073.25 146.25 li
1070.25 147 li
1067.25 148.5 li
1064.25 149.25 li
1062 150.75 li
1060.5 152.25 li
1059 153 li
1057.5 154.5 li
1056.75 156 li
1056.75 156.75 li
1056.75 158.25 li
1057.5 159.75 li
1057.5 159 li
1059 160.5 li
1059.75 162 li
1062 163.5 li
1064.25 164.25 li
1067.25 165.75 li
1070.25 166.5 li
1073.25 168 li
1077 168.75 li
1081.5 170.25 li
1085.25 171 li
1090.5 172.5 li
1095 173.25 li
1101 174 li
1106.25 174.75 li
1112.25 175.5 li
1118.25 177 li
1125 177.75 li
1131.75 178.5 li
1138.5 178.5 li
1145.25 179.25 li
1152.75 180 li
1160.25 180.75 li
1167.75 180.75 li
1176 181.5 li
1184.25 181.5 li
1192.5 182.25 li
1200.75 182.25 li
1209 182.25 li
1218 182.25 li
1226.25 183 li
1235.25 182.25 li
1243.5 182.25 li
1252.5 182.25 li
1260.75 182.25 li
1269 181.5 li
1277.25 181.5 li
1284.75 180.75 li
1292.25 180.75 li
1299.75 180 li
1307.25 179.25 li
1314.75 178.5 li
1321.5 178.5 li
1328.25 177.75 li
1334.25 177 li
1341 175.5 li
1346.25 174.75 li
1352.25 174 li
1357.5 173.25 li
1362.75 172.5 li
1367.25 171 li
1371.75 170.25 li
1375.5 168.75 li
1379.25 168 li
1383 166.5 li
1386 165.75 li
1388.25 164.25 li
1390.5 163.5 li
1392.75 162 li
1394.25 160.5 li
1395 159 li
1395 159.75 li
1395.75 158.25 li
1395.75 156.75 li
1395.75 156 li
cp
1396.5 156.75 mo
1396.5 313.5 li
1396.73 313.44 li
1396.73 313.44 1396.73 313.44 1396.5 313.5 cv
1396.5 315 li
1396.55 314.82 li
1396.55 314.88 1396.49 314.88 1396.5 315 cv
1395.75 316.5 li
1395.83 316.26 li
1395.83 316.26 1395.83 316.32 1395.75 316.5 cv
1395 318 li
1394.69 317.64 li
1394.69 317.64 1394.69 317.64 1395 318 cv
1393.5 318.75 li
1391.25 320.25 li
1389 321.75 li
1386 322.5 li
1383 324 li
1380 324.75 li
1376.25 326.25 li
1371.75 327 li
1367.25 328.5 li
1362.75 329.25 li
1357.5 330 li
1352.25 331.5 li
1347 332.25 li
1341 333 li
1334.25 333.75 li
1328.25 334.5 li
1321.5 335.25 li
1314.75 336 li
1307.25 336.75 li
1300.5 337.5 li
1293 337.5 li
1284.75 338.25 li
1277.25 339 li
1269 339 li
1260.75 339 li
1252.5 339.75 li
1243.5 339.75 li
1235.25 339.75 li
1226.25 339.75 li
1218 339.75 li
1209 339.75 li
1200.75 339.75 li
1192.5 339 li
1184.25 339 li
1176 339 li
1167.75 338.25 li
1160.25 337.5 li
1152.75 337.5 li
1145.25 336.75 li
1138.5 336 li
1131 335.25 li
1125 334.5 li
1118.25 333.75 li
1112.25 333 li
1106.25 332.25 li
1100.25 331.5 li
1095 330 li
1090.5 329.25 li
1085.25 328.5 li
1080.75 327 li
1077 326.25 li
1073.25 324.75 li
1069.5 324 li
1066.5 322.5 li
1064.25 321.75 li
1062 320.25 li
1059.75 318.75 li
1058.25 318 li
1058.18 317.7 li
1058.18 317.64 1058.18 317.64 1058.25 318 cv
1056.75 316.5 li
1057.04 316.32 li
1057.04 316.32 1057.04 316.26 1056.75 316.5 cv
1056.75 315 li
1056.38 314.94 li
1056.32 314.88 1056.32 314.88 1056 315 cv
1056 313.5 li
1056.14 313.5 li
1056.08 313.44 1056.08 313.44 1056 313.5 cv
1056 156.75 li
1056.75 156.75 li
1056.75 313.5 li
1056.75 315 li
1056.75 314.25 li
1057.5 315.75 li
1059 317.25 li
1059.75 318 li
1062 319.5 li
1064.25 321 li
1067.25 321.75 li
1070.25 323.25 li
1073.25 324 li
1077 325.5 li
1081.5 326.25 li
1085.25 327.75 li
1090.5 328.5 li
1095 330 li
1101 330.75 li
1106.25 331.5 li
1112.25 332.25 li
1118.25 333 li
1125 333.75 li
1131.75 334.5 li
1138.5 335.25 li
1145.25 336 li
1152.75 336.75 li
1160.25 336.75 li
1167.75 337.5 li
1176 338.25 li
1184.25 338.25 li
1192.5 339 li
1200.75 339 li
1209 339 li
1218 339 li
1226.25 339 li
1235.25 339 li
1243.5 339 li
1252.5 339 li
1260.75 339 li
1269 338.25 li
1277.25 338.25 li
1284.75 337.5 li
1292.25 336.75 li
1299.75 336.75 li
1307.25 336 li
1314.75 335.25 li
1321.5 334.5 li
1328.25 333.75 li
1334.25 333 li
1341 332.25 li
1346.25 331.5 li
1352.25 330.75 li
1357.5 330 li
1362.75 328.5 li
1367.25 327.75 li
1371.75 326.25 li
1375.5 325.5 li
1379.25 324.75 li
1383 323.25 li
1386 321.75 li
1388.25 321 li
1390.5 319.5 li
1392.75 318.75 li
1394.25 317.25 li
1395 315.75 li
1395.75 314.25 li
1395.75 315 li
1395.75 313.5 li
1395.75 156.75 li
1396.5 156.75 li
cp
1 /0 /CSD get_res sepcs
1 sep
ef
1396.73 156.85 mo
1396.73 156.91 1396.73 156.97 1396.5 156.75 cv
1396.5 158.25 li
1396.55 158.35 li
1396.55 158.35 1396.49 158.41 1396.5 158.25 cv
1395.75 159.75 li
1395.83 159.73 li
1395.83 159.79 1395.83 159.79 1395.75 159.75 cv
1395 161.25 li
1394.69 161.11 li
1394.69 161.17 1394.69 161.17 1395 161.25 cv
1393.5 162.75 li
1391.25 163.5 li
1389 165 li
1386 166.5 li
1383 167.25 li
1380 168.75 li
1376.25 169.5 li
1371.75 171 li
1367.25 171.75 li
1362.75 172.5 li
1357.5 174 li
1352.25 174.75 li
1347 175.5 li
1341 176.25 li
1334.25 177.75 li
1328.25 178.5 li
1321.5 179.25 li
1314.75 179.25 li
1307.25 180 li
1300.5 180.75 li
1293 181.5 li
1284.75 181.5 li
1277.25 182.25 li
1269 182.25 li
1260.75 183 li
1252.5 183 li
1243.5 183 li
1235.25 183 li
1226.25 183 li
1218 183 li
1209 183 li
1200.75 183 li
1192.5 183 li
1184.25 182.25 li
1176 182.25 li
1167.75 181.5 li
1160.25 181.5 li
1152.75 180.75 li
1145.25 180 li
1138.5 179.25 li
1131 179.25 li
1125 178.5 li
1118.25 177.75 li
1112.25 176.25 li
1106.25 175.5 li
1100.25 174.75 li
1095 174 li
1090.5 172.5 li
1085.25 171.75 li
1080.75 171 li
1077 169.5 li
1073.25 168.75 li
1069.5 167.25 li
1066.5 166.5 li
1064.25 165 li
1062 163.5 li
1059.75 162.75 li
1058.25 161.25 li
1058.18 161.17 li
1058.18 161.17 1058.18 161.17 1058.25 161.25 cv
1056.75 159.75 li
1057.04 159.85 li
1057.04 159.79 1057.04 159.79 1056.75 159.75 cv
1056.75 158.25 li
1056.38 158.41 li
1056.32 158.41 1056.32 158.35 1056 158.25 cv
1056 156.75 li
1056.14 156.97 li
1056.08 156.97 1056.08 156.91 1056 156.75 cv
1056 155.25 li
1056.32 155.53 li
1056.32 155.47 1056.32 155.47 1056.75 155.25 cv
1056.75 153.75 li
1057.04 154.09 li
1057.04 154.09 1057.04 154.03 1056.75 153.75 cv
1058.25 153 li
1058.12 152.71 li
1058.18 152.71 1058.18 152.71 1058.25 153 cv
1059.75 151.5 li
1061.25 150 li
1064.25 148.5 li
1066.5 147.75 li
1069.5 146.25 li
1073.25 145.5 li
1077 144 li
1080.75 143.25 li
1085.25 141.75 li
1090.5 141 li
1095 140.25 li
1100.25 138.75 li
1106.25 138 li
1112.25 137.25 li
1118.25 136.5 li
1125 135.75 li
1131 135 li
1138.5 134.25 li
1145.25 133.5 li
1152.75 132.75 li
1160.25 132.75 li
1167.75 132 li
1176 132 li
1184.25 131.25 li
1192.5 131.25 li
1200.75 130.5 li
1209 130.5 li
1218 130.5 li
1226.25 130.5 li
1235.25 130.5 li
1243.5 130.5 li
1252.5 130.5 li
1260.75 131.25 li
1269 131.25 li
1277.25 132 li
1284.75 132 li
1293 132.75 li
1300.5 132.75 li
1307.25 133.5 li
1314.75 134.25 li
1321.5 135 li
1328.25 135.75 li
1334.25 136.5 li
1341 137.25 li
1347 138 li
1352.25 138.75 li
1357.5 140.25 li
1362.75 141 li
1367.25 141.75 li
1371.75 143.25 li
1376.25 144 li
1380 145.5 li
1383 146.25 li
1386 147.75 li
1389 148.5 li
1391.25 150 li
1393.5 151.5 li
1395 153 li
1394.69 152.71 li
1394.69 152.71 1394.69 152.71 1395 153 cv
1395.75 153.75 li
1395.77 154.03 li
1395.83 154.03 1395.83 154.09 1395.75 153.75 cv
1396.5 155.25 li
1396.49 155.41 li
1396.49 155.47 1396.55 155.47 1396.5 155.25 cv
1396.5 156.75 li
cp
1395.75 156 mo
1395.75 156 li
1395 154.5 li
1394.25 153 li
1392.75 152.25 li
1390.5 150.75 li
1389 149.25 li
1386 148.5 li
1383 147 li
1379.25 146.25 li
1375.5 144.75 li
1371.75 144 li
1367.25 142.5 li
1362.75 141.75 li
1357.5 141 li
1352.25 139.5 li
1346.25 138.75 li
1341 138 li
1334.25 137.25 li
1328.25 136.5 li
1321.5 135.75 li
1314.75 135 li
1307.25 134.25 li
1299.75 133.5 li
1292.25 133.5 li
1284.75 132.75 li
1277.25 132 li
1269 132 li
1260.75 132 li
1252.5 131.25 li
1243.5 131.25 li
1235.25 131.25 li
1226.25 131.25 li
1218 131.25 li
1209 131.25 li
1200.75 131.25 li
1192.5 132 li
1184.25 132 li
1176 132 li
1167.75 132.75 li
1160.25 133.5 li
1152.75 133.5 li
1145.25 134.25 li
1138.5 135 li
1131.75 135.75 li
1125 136.5 li
1118.25 137.25 li
1112.25 138 li
1106.25 138.75 li
1101 139.5 li
1095 141 li
1090.5 141.75 li
1085.25 142.5 li
1081.5 144 li
1077 144.75 li
1073.25 146.25 li
1070.25 147 li
1067.25 148.5 li
1064.25 149.25 li
1062 150.75 li
1060.5 152.25 li
1059 153 li
1057.5 154.5 li
1056.75 156 li
1056.75 156.75 li
1056.75 158.25 li
1057.5 159.75 li
1057.5 159 li
1059 160.5 li
1059.75 162 li
1062 163.5 li
1064.25 164.25 li
1067.25 165.75 li
1070.25 166.5 li
1073.25 168 li
1077 168.75 li
1081.5 170.25 li
1085.25 171 li
1090.5 172.5 li
1095 173.25 li
1101 174 li
1106.25 174.75 li
1112.25 175.5 li
1118.25 177 li
1125 177.75 li
1131.75 178.5 li
1138.5 178.5 li
1145.25 179.25 li
1152.75 180 li
1160.25 180.75 li
1167.75 180.75 li
1176 181.5 li
1184.25 181.5 li
1192.5 182.25 li
1200.75 182.25 li
1209 182.25 li
1218 182.25 li
1226.25 183 li
1235.25 182.25 li
1243.5 182.25 li
1252.5 182.25 li
1260.75 182.25 li
1269 181.5 li
1277.25 181.5 li
1284.75 180.75 li
1292.25 180.75 li
1299.75 180 li
1307.25 179.25 li
1314.75 178.5 li
1321.5 178.5 li
1328.25 177.75 li
1334.25 177 li
1341 175.5 li
1346.25 174.75 li
1352.25 174 li
1357.5 173.25 li
1362.75 172.5 li
1367.25 171 li
1371.75 170.25 li
1375.5 168.75 li
1379.25 168 li
1383 166.5 li
1386 165.75 li
1388.25 164.25 li
1390.5 163.5 li
1392.75 162 li
1394.25 160.5 li
1395 159 li
1395 159.75 li
1395.75 158.25 li
1395.75 156.75 li
1395.75 156 li
cp
1396.5 156.75 mo
1396.5 313.5 li
1396.73 313.44 li
1396.73 313.44 1396.73 313.44 1396.5 313.5 cv
1396.5 315 li
1396.55 314.82 li
1396.55 314.88 1396.49 314.88 1396.5 315 cv
1395.75 316.5 li
1395.83 316.26 li
1395.83 316.26 1395.83 316.32 1395.75 316.5 cv
1395 318 li
1394.69 317.64 li
1394.69 317.64 1394.69 317.64 1395 318 cv
1393.5 318.75 li
1391.25 320.25 li
1389 321.75 li
1386 322.5 li
1383 324 li
1380 324.75 li
1376.25 326.25 li
1371.75 327 li
1367.25 328.5 li
1362.75 329.25 li
1357.5 330 li
1352.25 331.5 li
1347 332.25 li
1341 333 li
1334.25 333.75 li
1328.25 334.5 li
1321.5 335.25 li
1314.75 336 li
1307.25 336.75 li
1300.5 337.5 li
1293 337.5 li
1284.75 338.25 li
1277.25 339 li
1269 339 li
1260.75 339 li
1252.5 339.75 li
1243.5 339.75 li
1235.25 339.75 li
1226.25 339.75 li
1218 339.75 li
1209 339.75 li
1200.75 339.75 li
1192.5 339 li
1184.25 339 li
1176 339 li
1167.75 338.25 li
1160.25 337.5 li
1152.75 337.5 li
1145.25 336.75 li
1138.5 336 li
1131 335.25 li
1125 334.5 li
1118.25 333.75 li
1112.25 333 li
1106.25 332.25 li
1100.25 331.5 li
1095 330 li
1090.5 329.25 li
1085.25 328.5 li
1080.75 327 li
1077 326.25 li
1073.25 324.75 li
1069.5 324 li
1066.5 322.5 li
1064.25 321.75 li
1062 320.25 li
1059.75 318.75 li
1058.25 318 li
1058.18 317.7 li
1058.18 317.64 1058.18 317.64 1058.25 318 cv
1056.75 316.5 li
1057.04 316.32 li
1057.04 316.32 1057.04 316.26 1056.75 316.5 cv
1056.75 315 li
1056.38 314.94 li
1056.32 314.88 1056.32 314.88 1056 315 cv
1056 313.5 li
1056.14 313.5 li
1056.08 313.44 1056.08 313.44 1056 313.5 cv
1056 156.75 li
1056.75 156.75 li
1056.75 313.5 li
1056.75 315 li
1056.75 314.25 li
1057.5 315.75 li
1059 317.25 li
1059.75 318 li
1062 319.5 li
1064.25 321 li
1067.25 321.75 li
1070.25 323.25 li
1073.25 324 li
1077 325.5 li
1081.5 326.25 li
1085.25 327.75 li
1090.5 328.5 li
1095 330 li
1101 330.75 li
1106.25 331.5 li
1112.25 332.25 li
1118.25 333 li
1125 333.75 li
1131.75 334.5 li
1138.5 335.25 li
1145.25 336 li
1152.75 336.75 li
1160.25 336.75 li
1167.75 337.5 li
1176 338.25 li
1184.25 338.25 li
1192.5 339 li
1200.75 339 li
1209 339 li
1218 339 li
1226.25 339 li
1235.25 339 li
1243.5 339 li
1252.5 339 li
1260.75 339 li
1269 338.25 li
1277.25 338.25 li
1284.75 337.5 li
1292.25 336.75 li
1299.75 336.75 li
1307.25 336 li
1314.75 335.25 li
1321.5 334.5 li
1328.25 333.75 li
1334.25 333 li
1341 332.25 li
1346.25 331.5 li
1352.25 330.75 li
1357.5 330 li
1362.75 328.5 li
1367.25 327.75 li
1371.75 326.25 li
1375.5 325.5 li
1379.25 324.75 li
1383 323.25 li
1386 321.75 li
1388.25 321 li
1390.5 319.5 li
1392.75 318.75 li
1394.25 317.25 li
1395 315.75 li
1395.75 314.25 li
1395.75 315 li
1395.75 313.5 li
1395.75 156.75 li
1396.5 156.75 li
cp
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TMYULW+VERDANA gcheck setglobal} if
1 282 19 <00020089ffe1048f05ef000b002300a940223601390b340c3b123b18341e
4501490b440c4b124b18441e0c154909022149030a0fb8fff8b40b0b4255
0fb8fffcb40c0c42550fb8fff4b60c0c02550f2100b8fff0b40f0f025500
b8fff440270b0b025500180c0c0255009e250f251f25021b080b0b42551b
040c0c42551b0c0c0c02551b2106b8fff040130f0f025506100909025506
0c0b0b025506982410f62b2b2bed2b2b2b5d10f62b2b2bed2b2b2b003fed
3fed31305d01100221200211101221201201363635342627262623220607
0606151416171616333236048ffbfef8fef4f7fa0109010cf7fef9231919
2423795f5e7b24221916242179645e7c02e9fe6ffe89017c018a018d017b
fe7ffcb551db9a98e04e4d4e4e4f4aee8e9cd2534e524e00>TMYULW+VERDANA AddT42Char 
1 576 20 <000101160000043c05d6000f00ba40190d080b0b42550e080b0b42550d10
0c0c42550e100c0c425504b8fffcb40d0d425503b8fffc40390d0d425505
4606060c030e034801080f111f110205021f0f010f0f0c0e0c0c0c02550e
0d0c0c06550e20023f036f03700303030c1010025503b8ffe0400b0f0f02
5503160909025503b8fff4401d0b0b0255031e0c0c025503060d0d025503
100d0d065503100c0c0655032f2b2b2b2b2b2b2b2b5d33ed2b2b39322f5d
2f335d003ffd323f332fed3130012b2b2b2b2b2b21213521112135323637
363637331121043cfcda0136feca3f90252e35049b01309803e688151419
4d41fac2>TMYULW+VERDANA AddT42Char 
1 820 21 <000100a10000049105f0002000fd4051501f601f02050306111603151124
113b05380d350e3f1d3f1e391f4b05480d450e4f1d4f1e491f5f035d045d
055b0956115f195e1b5d1c5f1d5f1e6a036406651162156f1e700274117f
1a7f1c7f1e2503b8ffe8b40c0c065502b8ffe840310c0c0655000f100f2d
082f1c300f400f060f400c0c02550f400c0d06550f400c0c42550f0f0b4a
1302021f4a01081f0208b8fff8b40b0b425508b8fffc40190c0c42550821
160c0f0f0255160c0909025516040b0b025516b8fff440190c0c02551616
0c0c06551616209e220f221f2202101002992110f6322f5d10f6322f2b2b
2b2b2bed2b2b1239003ffd323fed332f2b2b2b5d31302b2b5d015d212135
363637363635342623220607233536363332041514060706060706060721
0491fc1069d35bc08e99895bd4650a47ed6fe501042b2a27694b6be46303
21d15ab459badb7f74834042d2233addbd5593423e784969c554>TMYULW+VERDANA AddT42Char 
1 1658 38 <00010073ffe5054605ec002a008b406e05010d09061416011b0914152515
361543145b08580a580e5b105b28600361147002760f70141316161a3412
022a2a2634060a1600712c0f2c010f2c1f2c2f2c3f2c6f2c0520080b0b42
5520040c0c425520150c0c0b0b42550c080c0c42550c140b0b02550c1c09
0902550c682b10f62b2b2b2bed2b2b5d5d10f63c003fed332f3fed332f31
30015d250606070606232224272602353412373624333216171523262623
2206070606151416171616333236373305463759483d8f56a2fef762606c
68625f010da478ef920f7bf28a71b547454d554346bb688ffa6d0e6c182a
17131b5b615f0125c2b801226461663a49eb675e494d4be5969de2474a47
6262>TMYULW+VERDANA AddT42Char 
1 5562 58 <0001005c0000078d05d1000c00f7b9000cfffab40b0b42550cb8fff2400b
0c0c425507060b0c42550cb8fffb40b40d0d425507010d0d425547036703
7903030d010b020404020505080c0b1701190318051908190b2903290829
0b3b023903320434083c09330a3a0b4b02440444084c09430a4b0b55015a
0255045a0557075909550a65016a0265046a056a09650a7f02700473087c
09720a7c0b2e0c1400010007140605060303010340090902550940090902
55000300090205080b03090c0602060302083b0034064b0044067a007506
0600720e1f0e3f0e5f0e7f0e0406670d10ee5d10e65d003f3f1217395d2b
2b5d3130018710fd8710fd015d005d012b2b2b2b2b010123010123013301
01330101078dfe7ddffec7fecedafe76cb01390134c90137013705d1fa2f
04d4fb2c05d1fb2a04d6fb1e04e2>TMYULW+VERDANA AddT42Char 
1 6494 69 <000200b9ffe10490061400130020014540293402350f3b1530204402450f
4b154020571267127f087b1c0c0e0906174211040c011e40060a0b0814b8
fffcb40d0d425514b8fff8b40c0c425514b8fff8b40b0b425514b8fff4b4
0c0c065514b8fff4b60c0c0255141b00b8fff0b40f0f025500b8fff0b40b
0b025500b8fff4400b0d0d0255000e0c0c025500b8ffecb40909065500b8
fff4b40c0c065500b8fff3403b0d0d06550090221f223f22020e1b09080d
0d425509100c0c425509080b0b4255090c09090255090c0c0c0255090809
090655090c0c0c0655091a0cb8ffdeb4101002550cb8ffe2400b0f0f0255
0c0c090902550cb8ffeeb40d0d02550cb8fff6400b0c0c02550c06090906
550cb8fff0b40c0c06550cb8ffefb60d0d06550c882110f62b2b2b2b2b2b
2b2bfd2b2b2b2b2b2b2b32325d10f42b2b2b2b2b2b2bed2b2b2b2b2b003f
3fed3f3fed12393931305d01140607060623222627072311331136363332
120334262322060711161633323604904f4347aa665f8e450cb0bc4fb26f
c6e5c2849352a8485073499cb102378ce04c4f4f2d26340614fdd44153fe
d0fee6c8cf4738fd80241ccd>TMYULW+VERDANA AddT42Char 
TMYULW+VERDANA /CharStrings get begin
/zero 19 def
/one 20 def
/two 21 def
/C 38 def
/W 58 def
/b 69 def
end
TMYULW+VERDANA /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 67 /C put
dup 87 /W put
dup 98 /b put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/TMYULW+VERDANA*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two 16{/.notdef}rp /C 
/.notdef /E 3{/.notdef}rp /I 3{/.notdef}rp /M 4{/.notdef}rp /R 
4{/.notdef}rp /W 9{/.notdef}rp /a /b /c /d /e 
2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /n /o 
/p /.notdef /r /s /t /u 2{/.notdef}rp /x 
135{/.notdef}rp]
TMYULW+VERDANA nf
TMYULW+VERDANA*1 [35.9986 0 0 -35.9986 0 0 ]msf
1094.95 259 mo
(W)sh
1130.54 259 mo
(e)sh
1151.99 259 mo
(b)sh
1174.42 259 mo
(C)sh
1199.55 259 mo
(l)sh
1209.43 259 mo
(u)sh
1232.21 259 mo
(e)sh
1253.66 259 mo
( )sh
1266.31 259 mo
(2)sh
1289.2 259 mo
(0)sh
1312.08 259 mo
(1)sh
1334.97 259 mo
(2)sh
1611.75 324 mo
1952.25 324 li
1952.25 136.5 li
1611.75 136.5 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1611.75 324 mo
1952.25 324 li
1952.25 136.5 li
1611.75 136.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1611.75 135.75 mo
1952.25 135.75 li
1952.25 324 li
1611.75 324 li
1611.75 135.75 li
cp
1612.5 324 mo
1611.75 323.25 li
1952.25 323.25 li
1951.5 324 li
1951.5 136.5 li
1952.25 136.5 li
1611.75 136.5 li
1612.5 136.5 li
1612.5 324 li
cp
ef
1611.75 135.75 mo
1952.25 135.75 li
1952.25 324 li
1611.75 324 li
1611.75 135.75 li
cp
1612.5 324 mo
1611.75 323.25 li
1952.25 323.25 li
1951.5 324 li
1951.5 136.5 li
1952.25 136.5 li
1611.75 136.5 li
1612.5 136.5 li
1612.5 324 li
cp
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TMYULW+VERDANA gcheck setglobal} if
1 1176 37 <000300c80000052b05d1001500240033013b4012050c150c270c55025615
7f190612112c341eb8ffc040100f0f02551e1e071d3408032d34070816b8
fff840090b0b42551615122c0fb8fff4400b0b0b02550f200c0c02550fb8
fff240140d0d02550f260d0d06550f200c0c06550f0f0725b8fffcb40c0c
425525b8fff8400d0b0b42552515000c1010025500b8ffe6b40f0f025500
b8ffe8b40c0c025500b8fff2b40d0d025500b8ffe4b40d0d065500b8ffe8
40220c0c06550071350f354035021e2c080b0b42552c040c0d42552c1407
0e1010025507b8fffcb40b0b025507b8ffda400b0f0f0255070809090255
07b8ffeeb40c0c025507b8ffeab40d0d025507b8fff1b40d0d065507b8ff
f1b60c0c0655076c3410f62b2b2b2b2b2b2b2bfd2b2b325d10f62b2b2b2b
2b2bed2b2b12392f2b2b2b2b2b1239ed2b003fed3fed12392f2bed393931
30015d011406070606232111213216171616151406071516160134262726
26232311213236373636133426272626232111213236373636052b544754
c99bfdf001b9a3a24a524a6c5a97aefeb324282f8663ec01005d6e2f2f27
7f3647308962fec9010682a635383401ca6faa37423805d118262b875e6a
952d081fcb0204364a171b0dfe52131e1e5ffd9a5a6a25190ffdd61b2427
6400>TMYULW+VERDANA AddT42Char 
1 9726 78 <000100c1000004af0614000b010f40442802d801db090309010f0d1f011d
021f0d2d012f0d300b400b540b69027a010c020203011a000b000809b402
0b0a030a0802050a0507010105080b02600a700a020a0a00b8fff4403a0f
0f065500000d200d400d020803080d0d425503100c0c425503080b0b4255
030c09090255030c0c0c0255030409090655030c0c0c0655031a05b8ffde
b41010025505b8ffe2400b0f0f0255050c0909025505b8fff6b40c0c0255
05b8ffeeb40d0d025505b8ffe6400b0f0f065505040909065505b8fff7b4
0c0c065505b8fff7b60d0d065505890c10f62b2b2b2b2b2b2b2b2bfd2b2b
2b2b2b2b2b325d11332f2b332f5d3939003f3c3f3f1239393130018710c0
c07af51804c0018710fd08c0015d7121230107112311331101330104aff8
fe407abcbc021fedfdf901e974fe8b0614fc1a022ffdfc00>TMYULW+VERDANA AddT42Char 
TMYULW+VERDANA /CharStrings get begin
/B 37 def
/k 78 def
end
TMYULW+VERDANA /Encoding get
dup 66 /B put
dup 107 /k put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/TMYULW+VERDANA*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two 15{/.notdef}rp /B 
/C /.notdef /E 3{/.notdef}rp /I 3{/.notdef}rp /M 4{/.notdef}rp 
/R 4{/.notdef}rp /W 9{/.notdef}rp /a /b /c /d 
/e 2{/.notdef}rp /h /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
2{/.notdef}rp /x 135{/.notdef}rp]
TMYULW+VERDANA nf
TMYULW+VERDANA*1 [35.9986 0 0 -35.9986 0 0 ]msf
1670.03 242.05 mo
(B)sh
1694.71 242.05 mo
(l)sh
1704.59 242.05 mo
(o)sh
1726.44 242.05 mo
(c)sh
1745.19 242.05 mo
(k)sh
1766.5 242.05 mo
( )sh
1779.15 242.05 mo
(p)sh
1801.58 242.05 mo
(a)sh
1823.2 242.05 mo
(r)sh
1838.56 242.05 mo
(s)sh
1857.32 242.05 mo
(e)sh
1878.76 242.05 mo
(r)sh
319.5 401.25 mo
335.25 401.25 li
335.25 369 li
368.25 369 li
368.25 401.25 li
384 401.25 li
351.75 433.5 li
319.5 401.25 li
cp
.132174 .451331 .911681 0 cmyk
ef
1068 782.25 mo
1100.25 782.25 li
1100.25 765.75 li
1132.5 798 li
1100.25 831 li
1100.25 814.5 li
1068 814.5 li
1068 782.25 li
cp
ef
897.75 1295.67 mo
897.75 1266.15 921.75 1242.15 951 1242 cv
2132.25 1242 li
2132.34 1242.15 li
2161.85 1242.15 2185.85 1266.15 2185.5 1296 cv
2185.5 1509.75 li
2185.85 1509.74 li
2185.85 1539.26 2161.85 1563.26 2132.25 1563 cv
951 1563 li
951.26 1563.26 li
921.75 1563.26 897.75 1539.26 897.75 1509.75 cv
897.75 1296 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
897.75 1295.67 mo
897.75 1266.15 921.75 1242.15 951 1242 cv
2132.25 1242 li
2132.34 1242.15 li
2161.85 1242.15 2185.85 1266.15 2185.5 1296 cv
2185.5 1509.75 li
2185.85 1509.74 li
2185.85 1539.26 2161.85 1563.26 2132.25 1563 cv
951 1563 li
951.26 1563.26 li
921.75 1563.26 897.75 1539.26 897.75 1509.75 cv
897.75 1296 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1090.39 1324.95 mo
1090.39 1339.35 1166.53 1351.05 1260 1350.75 cv
1260.36 1351.05 li
1354.25 1351.05 1430.33 1339.35 1430.25 1325.25 cv
1430.25 1481.25 li
1430.33 1481.48 li
1430.33 1495.88 1354.25 1507.52 1260 1507.5 cv
1260.36 1507.52 li
1166.53 1507.52 1090.39 1495.88 1090.5 1481.25 cv
1090.5 1325.25 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1090.39 1324.95 mo
1090.39 1310.55 1166.53 1298.85 1260 1299 cv
1260.36 1298.85 li
1354.25 1298.85 1430.33 1310.55 1430.25 1325.25 cv
1430.33 1324.95 li
1430.33 1339.35 1354.25 1351.05 1260 1350.75 cv
1260.36 1351.05 li
1166.53 1351.05 1090.39 1339.35 1090.5 1325.25 cv
cp
ef
1430.69 1324.89 mo
1430.69 1324.95 1430.69 1325.01 1431 1325.25 cv
1430.25 1326.75 li
1430.51 1326.39 li
1430.51 1326.39 1430.45 1326.45 1430.25 1326.75 cv
1429.5 1327.5 li
1429.79 1327.77 li
1429.79 1327.83 1429.79 1327.83 1429.5 1328.25 cv
1428.75 1329 li
1428.65 1329.15 li
1428.65 1329.21 1428.65 1329.21 1428.75 1329 cv
1427.25 1330.5 li
1425 1332 li
1422.75 1332.75 li
1420.5 1334.25 li
1417.5 1335.75 li
1413.75 1336.5 li
1410 1338 li
1405.5 1338.75 li
1401.75 1340.25 li
1396.5 1341 li
1392 1341.75 li
1386 1342.5 li
1380.75 1344 li
1374.75 1344.75 li
1368.75 1345.5 li
1362 1346.25 li
1355.25 1347 li
1348.5 1347.75 li
1341.75 1348.5 li
1334.25 1348.5 li
1326.75 1349.25 li
1318.5 1350 li
1311 1350 li
1302.75 1350.75 li
1294.5 1350.75 li
1286.25 1350.75 li
1278 1351.5 li
1269 1351.5 li
1260 1351.5 li
1251.75 1351.5 li
1242.75 1351.5 li
1234.5 1350.75 li
1226.25 1350.75 li
1218 1350.75 li
1209.75 1350 li
1202.25 1350 li
1194 1349.25 li
1186.5 1348.5 li
1179 1348.5 li
1172.25 1347.75 li
1165.5 1347 li
1158.75 1346.25 li
1152 1345.5 li
1146 1344.75 li
1140 1344 li
1134.75 1343.25 li
1129.5 1341.75 li
1124.25 1341 li
1119 1340.25 li
1115.25 1338.75 li
1110.75 1338 li
1107 1336.5 li
1104 1335.75 li
1100.25 1334.25 li
1098 1332.75 li
1095.75 1332 li
1093.5 1330.5 li
1092 1329 li
1092.13 1329.21 li
1092.13 1329.21 1092.13 1329.21 1092 1329 cv
1091.25 1328.25 li
1090.99 1327.89 li
1090.99 1327.83 1090.99 1327.83 1091.25 1327.5 cv
1090.5 1326.75 li
1090.33 1326.45 li
1090.27 1326.45 1090.27 1326.39 1090.5 1326.75 cv
1089.75 1325.25 li
1090.09 1325.01 li
1090.03 1325.01 1090.03 1324.95 1089.75 1325.25 cv
1090.5 1323.75 li
1090.27 1323.57 li
1090.27 1323.51 1090.27 1323.51 1090.5 1323.75 cv
1091.25 1322.25 li
1090.99 1322.13 li
1090.99 1322.13 1090.99 1322.07 1091.25 1322.25 cv
1092 1320.75 li
1092.07 1320.75 li
1092.13 1320.75 1092.13 1320.75 1092 1320.75 cv
1093.5 1319.25 li
1095.75 1318.5 li
1098 1317 li
1100.25 1315.5 li
1104 1314.75 li
1107 1313.25 li
1110.75 1312.5 li
1115.25 1311 li
1119 1310.25 li
1124.25 1308.75 li
1129.5 1308 li
1134.75 1307.25 li
1140 1306.5 li
1146 1305 li
1152 1304.25 li
1158.75 1303.5 li
1165.5 1302.75 li
1172.25 1302 li
1179 1302 li
1186.5 1301.25 li
1194 1300.5 li
1202.25 1299.75 li
1209.75 1299.75 li
1218 1299 li
1226.25 1299 li
1234.5 1299 li
1242.75 1299 li
1251.75 1298.25 li
1260 1298.25 li
1269 1298.25 li
1278 1299 li
1286.25 1299 li
1294.5 1299 li
1302.75 1299 li
1311 1299.75 li
1318.5 1299.75 li
1326.75 1300.5 li
1334.25 1301.25 li
1341.75 1302 li
1348.5 1302 li
1355.25 1302.75 li
1362 1303.5 li
1368.75 1304.25 li
1374.75 1305 li
1380.75 1306.5 li
1386 1307.25 li
1392 1308 li
1396.5 1308.75 li
1401.75 1310.25 li
1405.5 1311 li
1410 1312.5 li
1413.75 1313.25 li
1417.5 1314.75 li
1420.5 1315.5 li
1422.75 1317 li
1425 1317.75 li
1427.25 1319.25 li
1428.75 1320.75 li
1428.65 1320.75 li
1428.65 1320.75 1428.65 1320.75 1428.75 1320.75 cv
1429.5 1322.25 li
1429.73 1322.07 li
1429.79 1322.07 1429.79 1322.13 1429.5 1322.25 cv
1430.25 1323.75 li
1430.45 1323.45 li
1430.45 1323.51 1430.51 1323.51 1430.25 1323.75 cv
1431 1325.25 li
cp
1429.5 1323.75 mo
1429.5 1323.75 li
1429.5 1322.25 li
1428 1321.5 li
1426.5 1320 li
1425 1318.5 li
1422.75 1317.75 li
1419.75 1316.25 li
1416.75 1315.5 li
1413.75 1314 li
1410 1313.25 li
1405.5 1311.75 li
1401 1311 li
1396.5 1309.5 li
1391.25 1308.75 li
1386 1308 li
1380.75 1307.25 li
1374.75 1305.75 li
1368.75 1305 li
1362 1304.25 li
1355.25 1303.5 li
1348.5 1302.75 li
1341 1302.75 li
1334.25 1302 li
1326.75 1301.25 li
1318.5 1300.5 li
1311 1300.5 li
1302.75 1299.75 li
1294.5 1299.75 li
1286.25 1299.75 li
1278 1299.75 li
1269 1299 li
1260 1299 li
1251.75 1299 li
1242.75 1299.75 li
1234.5 1299.75 li
1226.25 1299.75 li
1218 1299.75 li
1209.75 1300.5 li
1202.25 1300.5 li
1194 1301.25 li
1186.5 1302 li
1179.75 1302.75 li
1172.25 1302.75 li
1165.5 1303.5 li
1158.75 1304.25 li
1152 1305 li
1146 1305.75 li
1140 1307.25 li
1134.75 1308 li
1129.5 1308.75 li
1124.25 1309.5 li
1119.75 1311 li
1115.25 1311.75 li
1110.75 1313.25 li
1107 1314 li
1104 1315.5 li
1101 1316.25 li
1098 1317.75 li
1095.75 1318.5 li
1094.25 1320 li
1092.75 1321.5 li
1091.25 1322.25 li
1091.25 1323.75 li
1090.5 1325.25 li
1091.25 1326 li
1091.25 1327.5 li
1092.75 1329 li
1094.25 1329.75 li
1095.75 1331.25 li
1098 1332.75 li
1101 1333.5 li
1104 1335 li
1107 1335.75 li
1110.75 1337.25 li
1115.25 1338 li
1119.75 1339.5 li
1124.25 1340.25 li
1129.5 1341 li
1134.75 1342.5 li
1140 1343.25 li
1146 1344 li
1152 1344.75 li
1158.75 1345.5 li
1165.5 1346.25 li
1172.25 1347 li
1179.75 1347.75 li
1186.5 1347.75 li
1194 1348.5 li
1202.25 1349.25 li
1209.75 1349.25 li
1218 1350 li
1226.25 1350 li
1234.5 1350.75 li
1242.75 1350.75 li
1251.75 1350.75 li
1260 1350.75 li
1269 1350.75 li
1278 1350.75 li
1286.25 1350.75 li
1294.5 1350 li
1302.75 1350 li
1311 1349.25 li
1318.5 1349.25 li
1326.75 1348.5 li
1334.25 1347.75 li
1341 1347.75 li
1348.5 1347 li
1355.25 1346.25 li
1362 1345.5 li
1368.75 1344.75 li
1374.75 1344 li
1380.75 1343.25 li
1386 1342.5 li
1391.25 1341 li
1396.5 1340.25 li
1401 1339.5 li
1405.5 1338 li
1410 1337.25 li
1413.75 1335.75 li
1416.75 1335 li
1419.75 1333.5 li
1422.75 1332.75 li
1425 1331.25 li
1426.5 1329.75 li
1428 1329 li
1429.5 1327.5 li
1429.5 1326 li
1430.25 1325.25 li
1429.5 1323.75 li
cp
1431 1325.25 mo
1431 1481.25 li
1430.69 1481.48 li
1430.69 1481.48 1430.69 1481.48 1431 1481.25 cv
1430.25 1482.75 li
1430.51 1482.86 li
1430.51 1482.92 1430.45 1482.92 1430.25 1482.75 cv
1429.5 1484.25 li
1429.79 1484.3 li
1429.79 1484.3 1429.79 1484.36 1429.5 1484.25 cv
1428.75 1485.75 li
1428.65 1485.68 li
1428.65 1485.68 1428.65 1485.68 1428.75 1485.75 cv
1427.25 1487.25 li
1425 1488 li
1422.75 1489.5 li
1420.5 1491 li
1417.5 1491.75 li
1413.75 1493.25 li
1410 1494 li
1405.5 1495.5 li
1401.75 1496.25 li
1396.5 1497.75 li
1392 1498.5 li
1386 1499.25 li
1380.75 1500 li
1374.75 1501.5 li
1368.75 1502.25 li
1362 1503 li
1355.25 1503.75 li
1348.5 1504.5 li
1341.75 1504.5 li
1334.25 1505.25 li
1326.75 1506 li
1318.5 1506 li
1311 1506.75 li
1302.75 1506.75 li
1294.5 1507.5 li
1286.25 1507.5 li
1278 1507.5 li
1269 1508.25 li
1260 1508.25 li
1251.75 1508.25 li
1242.75 1507.5 li
1234.5 1507.5 li
1226.25 1507.5 li
1218 1506.75 li
1209.75 1506.75 li
1202.25 1506 li
1194 1506 li
1186.5 1505.25 li
1179 1504.5 li
1172.25 1504.5 li
1165.5 1503.75 li
1158.75 1503 li
1152 1502.25 li
1146 1501.5 li
1140 1500 li
1134.75 1499.25 li
1129.5 1498.5 li
1124.25 1497.75 li
1119 1496.25 li
1115.25 1495.5 li
1110.75 1494 li
1107 1493.25 li
1104 1491.75 li
1100.25 1491 li
1098 1489.5 li
1095.75 1488 li
1093.5 1487.25 li
1092 1485.75 li
1092.13 1485.74 li
1092.13 1485.68 1092.13 1485.68 1092 1485.75 cv
1091.25 1484.25 li
1090.99 1484.36 li
1090.99 1484.36 1090.99 1484.3 1091.25 1484.25 cv
1090.5 1482.75 li
1090.33 1482.98 li
1090.27 1482.92 1090.27 1482.92 1090.5 1482.75 cv
1089.75 1481.25 li
1090.09 1481.54 li
1090.03 1481.48 1090.03 1481.48 1089.75 1481.25 cv
1089.75 1325.25 li
1090.5 1325.25 li
1090.5 1481.25 li
1091.25 1482.75 li
1091.25 1484.25 li
1092.75 1485 li
1094.25 1486.5 li
1095.75 1488 li
1098 1488.75 li
1101 1490.25 li
1104 1491 li
1107 1492.5 li
1110.75 1493.25 li
1115.25 1494.75 li
1119.75 1495.5 li
1124.25 1497 li
1129.5 1497.75 li
1134.75 1498.5 li
1140 1499.25 li
1146 1500.75 li
1152 1501.5 li
1158.75 1502.25 li
1165.5 1503 li
1172.25 1503.75 li
1179.75 1503.75 li
1186.5 1504.5 li
1194 1505.25 li
1202.25 1505.25 li
1209.75 1506 li
1218 1506.75 li
1226.25 1506.75 li
1234.5 1506.75 li
1242.75 1506.75 li
1251.75 1507.5 li
1260 1507.5 li
1269 1507.5 li
1278 1506.75 li
1286.25 1506.75 li
1294.5 1506.75 li
1302.75 1506.75 li
1311 1506 li
1318.5 1505.25 li
1326.75 1505.25 li
1334.25 1504.5 li
1341 1503.75 li
1348.5 1503.75 li
1355.25 1503 li
1362 1502.25 li
1368.75 1501.5 li
1374.75 1500.75 li
1380.75 1499.25 li
1386 1498.5 li
1391.25 1497.75 li
1396.5 1497 li
1401 1495.5 li
1405.5 1494.75 li
1410 1493.25 li
1413.75 1492.5 li
1416.75 1491 li
1419.75 1490.25 li
1422.75 1488.75 li
1425 1488 li
1426.5 1486.5 li
1428 1485 li
1429.5 1484.25 li
1429.5 1482.75 li
1430.25 1481.25 li
1430.25 1325.25 li
1431 1325.25 li
cp
1 /0 /CSD get_res sepcs
1 sep
ef
1430.69 1324.89 mo
1430.69 1324.95 1430.69 1325.01 1431 1325.25 cv
1430.25 1326.75 li
1430.51 1326.39 li
1430.51 1326.39 1430.45 1326.45 1430.25 1326.75 cv
1429.5 1327.5 li
1429.79 1327.77 li
1429.79 1327.83 1429.79 1327.83 1429.5 1328.25 cv
1428.75 1329 li
1428.65 1329.15 li
1428.65 1329.21 1428.65 1329.21 1428.75 1329 cv
1427.25 1330.5 li
1425 1332 li
1422.75 1332.75 li
1420.5 1334.25 li
1417.5 1335.75 li
1413.75 1336.5 li
1410 1338 li
1405.5 1338.75 li
1401.75 1340.25 li
1396.5 1341 li
1392 1341.75 li
1386 1342.5 li
1380.75 1344 li
1374.75 1344.75 li
1368.75 1345.5 li
1362 1346.25 li
1355.25 1347 li
1348.5 1347.75 li
1341.75 1348.5 li
1334.25 1348.5 li
1326.75 1349.25 li
1318.5 1350 li
1311 1350 li
1302.75 1350.75 li
1294.5 1350.75 li
1286.25 1350.75 li
1278 1351.5 li
1269 1351.5 li
1260 1351.5 li
1251.75 1351.5 li
1242.75 1351.5 li
1234.5 1350.75 li
1226.25 1350.75 li
1218 1350.75 li
1209.75 1350 li
1202.25 1350 li
1194 1349.25 li
1186.5 1348.5 li
1179 1348.5 li
1172.25 1347.75 li
1165.5 1347 li
1158.75 1346.25 li
1152 1345.5 li
1146 1344.75 li
1140 1344 li
1134.75 1343.25 li
1129.5 1341.75 li
1124.25 1341 li
1119 1340.25 li
1115.25 1338.75 li
1110.75 1338 li
1107 1336.5 li
1104 1335.75 li
1100.25 1334.25 li
1098 1332.75 li
1095.75 1332 li
1093.5 1330.5 li
1092 1329 li
1092.13 1329.21 li
1092.13 1329.21 1092.13 1329.21 1092 1329 cv
1091.25 1328.25 li
1090.99 1327.89 li
1090.99 1327.83 1090.99 1327.83 1091.25 1327.5 cv
1090.5 1326.75 li
1090.33 1326.45 li
1090.27 1326.45 1090.27 1326.39 1090.5 1326.75 cv
1089.75 1325.25 li
1090.09 1325.01 li
1090.03 1325.01 1090.03 1324.95 1089.75 1325.25 cv
1090.5 1323.75 li
1090.27 1323.57 li
1090.27 1323.51 1090.27 1323.51 1090.5 1323.75 cv
1091.25 1322.25 li
1090.99 1322.13 li
1090.99 1322.13 1090.99 1322.07 1091.25 1322.25 cv
1092 1320.75 li
1092.07 1320.75 li
1092.13 1320.75 1092.13 1320.75 1092 1320.75 cv
1093.5 1319.25 li
1095.75 1318.5 li
1098 1317 li
1100.25 1315.5 li
1104 1314.75 li
1107 1313.25 li
1110.75 1312.5 li
1115.25 1311 li
1119 1310.25 li
1124.25 1308.75 li
1129.5 1308 li
1134.75 1307.25 li
1140 1306.5 li
1146 1305 li
1152 1304.25 li
1158.75 1303.5 li
1165.5 1302.75 li
1172.25 1302 li
1179 1302 li
1186.5 1301.25 li
1194 1300.5 li
1202.25 1299.75 li
1209.75 1299.75 li
1218 1299 li
1226.25 1299 li
1234.5 1299 li
1242.75 1299 li
1251.75 1298.25 li
1260 1298.25 li
1269 1298.25 li
1278 1299 li
1286.25 1299 li
1294.5 1299 li
1302.75 1299 li
1311 1299.75 li
1318.5 1299.75 li
1326.75 1300.5 li
1334.25 1301.25 li
1341.75 1302 li
1348.5 1302 li
1355.25 1302.75 li
1362 1303.5 li
1368.75 1304.25 li
1374.75 1305 li
1380.75 1306.5 li
1386 1307.25 li
1392 1308 li
1396.5 1308.75 li
1401.75 1310.25 li
1405.5 1311 li
1410 1312.5 li
1413.75 1313.25 li
1417.5 1314.75 li
1420.5 1315.5 li
1422.75 1317 li
1425 1317.75 li
1427.25 1319.25 li
1428.75 1320.75 li
1428.65 1320.75 li
1428.65 1320.75 1428.65 1320.75 1428.75 1320.75 cv
1429.5 1322.25 li
1429.73 1322.07 li
1429.79 1322.07 1429.79 1322.13 1429.5 1322.25 cv
1430.25 1323.75 li
1430.45 1323.45 li
1430.45 1323.51 1430.51 1323.51 1430.25 1323.75 cv
1431 1325.25 li
cp
1429.5 1323.75 mo
1429.5 1323.75 li
1429.5 1322.25 li
1428 1321.5 li
1426.5 1320 li
1425 1318.5 li
1422.75 1317.75 li
1419.75 1316.25 li
1416.75 1315.5 li
1413.75 1314 li
1410 1313.25 li
1405.5 1311.75 li
1401 1311 li
1396.5 1309.5 li
1391.25 1308.75 li
1386 1308 li
1380.75 1307.25 li
1374.75 1305.75 li
1368.75 1305 li
1362 1304.25 li
1355.25 1303.5 li
1348.5 1302.75 li
1341 1302.75 li
1334.25 1302 li
1326.75 1301.25 li
1318.5 1300.5 li
1311 1300.5 li
1302.75 1299.75 li
1294.5 1299.75 li
1286.25 1299.75 li
1278 1299.75 li
1269 1299 li
1260 1299 li
1251.75 1299 li
1242.75 1299.75 li
1234.5 1299.75 li
1226.25 1299.75 li
1218 1299.75 li
1209.75 1300.5 li
1202.25 1300.5 li
1194 1301.25 li
1186.5 1302 li
1179.75 1302.75 li
1172.25 1302.75 li
1165.5 1303.5 li
1158.75 1304.25 li
1152 1305 li
1146 1305.75 li
1140 1307.25 li
1134.75 1308 li
1129.5 1308.75 li
1124.25 1309.5 li
1119.75 1311 li
1115.25 1311.75 li
1110.75 1313.25 li
1107 1314 li
1104 1315.5 li
1101 1316.25 li
1098 1317.75 li
1095.75 1318.5 li
1094.25 1320 li
1092.75 1321.5 li
1091.25 1322.25 li
1091.25 1323.75 li
1090.5 1325.25 li
1091.25 1326 li
1091.25 1327.5 li
1092.75 1329 li
1094.25 1329.75 li
1095.75 1331.25 li
1098 1332.75 li
1101 1333.5 li
1104 1335 li
1107 1335.75 li
1110.75 1337.25 li
1115.25 1338 li
1119.75 1339.5 li
1124.25 1340.25 li
1129.5 1341 li
1134.75 1342.5 li
1140 1343.25 li
1146 1344 li
1152 1344.75 li
1158.75 1345.5 li
1165.5 1346.25 li
1172.25 1347 li
1179.75 1347.75 li
1186.5 1347.75 li
1194 1348.5 li
1202.25 1349.25 li
1209.75 1349.25 li
1218 1350 li
1226.25 1350 li
1234.5 1350.75 li
1242.75 1350.75 li
1251.75 1350.75 li
1260 1350.75 li
1269 1350.75 li
1278 1350.75 li
1286.25 1350.75 li
1294.5 1350 li
1302.75 1350 li
1311 1349.25 li
1318.5 1349.25 li
1326.75 1348.5 li
1334.25 1347.75 li
1341 1347.75 li
1348.5 1347 li
1355.25 1346.25 li
1362 1345.5 li
1368.75 1344.75 li
1374.75 1344 li
1380.75 1343.25 li
1386 1342.5 li
1391.25 1341 li
1396.5 1340.25 li
1401 1339.5 li
1405.5 1338 li
1410 1337.25 li
1413.75 1335.75 li
1416.75 1335 li
1419.75 1333.5 li
1422.75 1332.75 li
1425 1331.25 li
1426.5 1329.75 li
1428 1329 li
1429.5 1327.5 li
1429.5 1326 li
1430.25 1325.25 li
1429.5 1323.75 li
cp
1431 1325.25 mo
1431 1481.25 li
1430.69 1481.48 li
1430.69 1481.48 1430.69 1481.48 1431 1481.25 cv
1430.25 1482.75 li
1430.51 1482.86 li
1430.51 1482.92 1430.45 1482.92 1430.25 1482.75 cv
1429.5 1484.25 li
1429.79 1484.3 li
1429.79 1484.3 1429.79 1484.36 1429.5 1484.25 cv
1428.75 1485.75 li
1428.65 1485.68 li
1428.65 1485.68 1428.65 1485.68 1428.75 1485.75 cv
1427.25 1487.25 li
1425 1488 li
1422.75 1489.5 li
1420.5 1491 li
1417.5 1491.75 li
1413.75 1493.25 li
1410 1494 li
1405.5 1495.5 li
1401.75 1496.25 li
1396.5 1497.75 li
1392 1498.5 li
1386 1499.25 li
1380.75 1500 li
1374.75 1501.5 li
1368.75 1502.25 li
1362 1503 li
1355.25 1503.75 li
1348.5 1504.5 li
1341.75 1504.5 li
1334.25 1505.25 li
1326.75 1506 li
1318.5 1506 li
1311 1506.75 li
1302.75 1506.75 li
1294.5 1507.5 li
1286.25 1507.5 li
1278 1507.5 li
1269 1508.25 li
1260 1508.25 li
1251.75 1508.25 li
1242.75 1507.5 li
1234.5 1507.5 li
1226.25 1507.5 li
1218 1506.75 li
1209.75 1506.75 li
1202.25 1506 li
1194 1506 li
1186.5 1505.25 li
1179 1504.5 li
1172.25 1504.5 li
1165.5 1503.75 li
1158.75 1503 li
1152 1502.25 li
1146 1501.5 li
1140 1500 li
1134.75 1499.25 li
1129.5 1498.5 li
1124.25 1497.75 li
1119 1496.25 li
1115.25 1495.5 li
1110.75 1494 li
1107 1493.25 li
1104 1491.75 li
1100.25 1491 li
1098 1489.5 li
1095.75 1488 li
1093.5 1487.25 li
1092 1485.75 li
1092.13 1485.74 li
1092.13 1485.68 1092.13 1485.68 1092 1485.75 cv
1091.25 1484.25 li
1090.99 1484.36 li
1090.99 1484.36 1090.99 1484.3 1091.25 1484.25 cv
1090.5 1482.75 li
1090.33 1482.98 li
1090.27 1482.92 1090.27 1482.92 1090.5 1482.75 cv
1089.75 1481.25 li
1090.09 1481.54 li
1090.03 1481.48 1090.03 1481.48 1089.75 1481.25 cv
1089.75 1325.25 li
1090.5 1325.25 li
1090.5 1481.25 li
1091.25 1482.75 li
1091.25 1484.25 li
1092.75 1485 li
1094.25 1486.5 li
1095.75 1488 li
1098 1488.75 li
1101 1490.25 li
1104 1491 li
1107 1492.5 li
1110.75 1493.25 li
1115.25 1494.75 li
1119.75 1495.5 li
1124.25 1497 li
1129.5 1497.75 li
1134.75 1498.5 li
1140 1499.25 li
1146 1500.75 li
1152 1501.5 li
1158.75 1502.25 li
1165.5 1503 li
1172.25 1503.75 li
1179.75 1503.75 li
1186.5 1504.5 li
1194 1505.25 li
1202.25 1505.25 li
1209.75 1506 li
1218 1506.75 li
1226.25 1506.75 li
1234.5 1506.75 li
1242.75 1506.75 li
1251.75 1507.5 li
1260 1507.5 li
1269 1507.5 li
1278 1506.75 li
1286.25 1506.75 li
1294.5 1506.75 li
1302.75 1506.75 li
1311 1506 li
1318.5 1505.25 li
1326.75 1505.25 li
1334.25 1504.5 li
1341 1503.75 li
1348.5 1503.75 li
1355.25 1503 li
1362 1502.25 li
1368.75 1501.5 li
1374.75 1500.75 li
1380.75 1499.25 li
1386 1498.5 li
1391.25 1497.75 li
1396.5 1497 li
1401 1495.5 li
1405.5 1494.75 li
1410 1493.25 li
1413.75 1492.5 li
1416.75 1491 li
1419.75 1490.25 li
1422.75 1488.75 li
1425 1488 li
1426.5 1486.5 li
1428 1485 li
1429.5 1484.25 li
1429.5 1482.75 li
1430.25 1481.25 li
1430.25 1325.25 li
1431 1325.25 li
cp
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TMYULW+VERDANA gcheck setglobal} if
1 2870 47 <000100c80000047605d100050083b602030435010800b8ffe8401f0c0c06
550000070f070104080b0b425504040c0d42550414010e1010025501b8ff
fcb40b0b025501b8ffda400b0f0f025501080909025501b8ffeeb40c0c02
5501b8ffeab40d0d025501b8ffe9b40d0d065501b8ffeab60c0c0655016c
0610f62b2b2b2b2b2b2b2bed2b2b5d11332f2b003fed3f31302121113311
210476fc52c602e805d1fadf>TMYULW+VERDANA AddT42Char 
1 3474 50 <00020073ffe105da05f00017002300f84022040004060b0c0b1217001706
190c19125701570553075f0b580d58115f1353171015b8fff04018101002
5509101010025576097915021b3415022134090a18b8fff8b40b0b425518
b8fffcb40c0c425518b8fffcb60c0c0655181503b8ffe8b40d0d425503b8
fffcb40b0b025503b8ffe6b40909025503b8ffe2b40c0c025503b8fff040
4c0d0d02550373250f25010f251f253f25031e040c0c42551e080b0b4255
1e040c0c06551e150f080c0c42550f0c0b0b42550f120b0b02550f160909
02550f060c0c02550f040c0c06550f682410f62b2b2b2b2b2bed2b2b2b5d
5d10f62b2b2b2b2bed2b2b2b003fed3fed5d2b2b3130015d011612151402
070606232224272602353412373624333216131000232200111000333200
051e5b6163595cfba19dfeff5a5a61605c5801059aa0ff47fefce1e3fefd
0108dede0107052664fedeb8b8fedd6165666863630120b9b60121676268
69fd610122013bfec5fedefedbfec9013700>TMYULW+VERDANA AddT42Char 
1 5136 55 <00010000000004ee05d10007009cb90004fffcb40c0d425503b8fffcb40c
0d425504b8fff8b40b0b425503b8fff8401d0b0b4255010435060303080f
091f094f0903005b010209090255011404b8fff6400a0d0d0255045b4f05
0105b8ffea400b1010025505080b0b025505b8ffeab40909025505b8fff2
b40c0c025505b8ffeab40d0d025505b8ffffb40c0c0655052f2b2b2b2b2b
2b5df42bfd2be45d003f3ffd323130012b2b2b2b012111231121352104ee
fdecc6fdec04ee0521fadf0521b0>TMYULW+VERDANA AddT42Char 
TMYULW+VERDANA /CharStrings get begin
/L 47 def
/O 50 def
/T 55 def
end
TMYULW+VERDANA /Encoding get
dup 76 /L put
dup 79 /O put
dup 84 /T put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/TMYULW+VERDANA*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two 15{/.notdef}rp /B 
/C /.notdef /E 3{/.notdef}rp /I 2{/.notdef}rp /L /M 
/.notdef /O 2{/.notdef}rp /R /.notdef /T 2{/.notdef}rp /W 
9{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp /h 
/i /.notdef /k /l /m /n /o /p 
/.notdef /r /s /t /u 2{/.notdef}rp /x 135{/.notdef}rp]
TMYULW+VERDANA nf
TMYULW+VERDANA*1 [35.9986 0 0 -35.9986 0 0 ]msf
1217.79 1429.62 mo
(L)sh
1237.83 1429.62 mo
(E)sh
1260.59 1429.62 mo
(T)sh
1282.77 1429.62 mo
(O)sh
1311.11 1429.62 mo
(R)sh
1646.25 1503 mo
1986 1503 li
1986 1315.5 li
1646.25 1315.5 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1645.5 1315.5 mo
1986.75 1315.5 li
1986.75 1503 li
1645.5 1503 li
1645.5 1315.5 li
cp
1646.25 1503 mo
1646.25 1502.25 li
1986 1502.25 li
1986 1503 li
1986 1315.5 li
1986 1316.25 li
1646.25 1316.25 li
1646.25 1315.5 li
1646.25 1503 li
cp
1 /0 /CSD get_res sepcs
1 sep
ef
1645.5 1315.5 mo
1986.75 1315.5 li
1986.75 1503 li
1645.5 1503 li
1645.5 1315.5 li
cp
1646.25 1503 mo
1646.25 1502.25 li
1986 1502.25 li
1986 1503 li
1986 1315.5 li
1986 1316.25 li
1646.25 1316.25 li
1646.25 1315.5 li
1646.25 1503 li
cp
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TMYULW+VERDANA gcheck setglobal} if
1 4664 54 <00010086ffe5050205ec00300142b9002ffff4b4101002552db8fff4b410
1002552eb8fff4409e10100255180e10100255170e10100255160e101002
55150c10100255140a101002550b09031f00231b08141f29082818241f24
2f390836103813351f362a4a0845104913451f4a27442a5802551b551f55
2d6b19661b651f662b602f7b16701f7020742a742d86122309400e103708
400e1037060200111a28041d06212125341d020a0a0e34060a2128080b0b
425528040c0c425528151a16090902551ab8fff0b50d0d02551a11b8fff8
b40b0b425511b8fffc400b0c0c4255111500211a0900b8ffe6b409090255
00b8fff0400f0c0c02550074320f32703202096a3110e65d10e62b2b1139
3910ed2b2b2f2b2bed2b2b2f003fed332f3fed332f111217394354584015
58115728681167287911762889118628971199280a5d5931302b2b5d2b2b
2b2b2b2b2b2b011406070606232224273533160433323635342627262627
262635342433320417152326242322061514161716161716160502514950
d596a1feff850e71012882b8cd61634baf62c6bf013cf39d0106650e55fe
eb919fc1607940ec52a6a801a957aa3b40483c3bf85e668a73635e1a141a
142acba3bbef3c2cea485f84685d6a1c0e28152cb200>TMYULW+VERDANA AddT42Char 
1 5330 57 <0001001a0000055e05d1000600bcb90006fffc400b0b0b425504040b0b42
5506b8fff4b40c0c425504b8fffeb40d0d425506b8fffd406a0d0d425547
014802020504050706570686060306140000010507045704860403041403
0203080144014b02580273017c02060005027503010303020845004a0302
020103040024003a005a006a00740006006e080f08010f08010b032b0335
03550365037b030603640710e65d5d5d10f65d1139395d003f3f5d123939
3130015d8710fd5dc08710fd5d08c0015d2b2b2b2b2b0101210133010105
5efde2fef8fde2d401d301d305d1fa2f05d1fae2051e>TMYULW+VERDANA AddT42Char 
TMYULW+VERDANA /CharStrings get begin
/S 54 def
/V 57 def
end
TMYULW+VERDANA /Encoding get
dup 83 /S put
dup 86 /V put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/TMYULW+VERDANA*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two 15{/.notdef}rp /B 
/C /.notdef /E 3{/.notdef}rp /I 2{/.notdef}rp /L /M 
/.notdef /O 2{/.notdef}rp /R /S /T /.notdef /V 
/W 9{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u 2{/.notdef}rp /x 
135{/.notdef}rp]
TMYULW+VERDANA nf
TMYULW+VERDANA*1 [35.9986 0 0 -35.9986 0 0 ]msf
1730.89 1420.1 mo
(R)sh
1755.92 1420.1 mo
(a)sh
1777.54 1420.1 mo
(n)sh
1800.32 1420.1 mo
(k)sh
1821.62 1420.1 mo
(S)sh
1846.23 1420.1 mo
(V)sh
1870.84 1420.1 mo
(M)sh
1504.5 1389 mo
1536.75 1389 li
1536.75 1372.5 li
1569 1404.75 li
1536.75 1437 li
1536.75 1421.25 li
1504.5 1421.25 li
1504.5 1389 li
cp
.132174 .451331 .911681 0 cmyk
ef
1215.18 560.75 mo
1215.18 504.9 1260.48 459.6 1316.25 459.75 cv
1720.5 459.75 li
1720.65 459.6 li
1776.5 459.6 1821.74 504.9 1821.75 561 cv
1821.75 1067.25 li
1821.74 1067.2 li
1821.74 1123.05 1776.5 1168.29 1720.5 1168.5 cv
1316.25 1168.5 li
1316.34 1168.29 li
1260.48 1168.29 1215.18 1123.05 1215 1067.25 cv
1215 561 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 lw
1215.18 560.75 mo
1215.18 504.9 1260.48 459.6 1316.25 459.75 cv
1720.5 459.75 li
1720.65 459.6 li
1776.5 459.6 1821.74 504.9 1821.75 561 cv
1821.75 1067.25 li
1821.74 1067.2 li
1821.74 1123.05 1776.5 1168.29 1720.5 1168.5 cv
1316.25 1168.5 li
1316.34 1168.29 li
1260.48 1168.29 1215.18 1123.05 1215 1067.25 cv
1215 561 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1362.75 726 mo
1702.5 726 li
1702.5 539.25 li
1362.75 539.25 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1362 538.5 mo
1703.25 538.5 li
1703.25 726.75 li
1362 726.75 li
1362 538.5 li
cp
1362.75 726 mo
1362.75 726 li
1702.5 726 li
1702.5 539.25 li
1362.75 539.25 li
1362.75 726 li
cp
1 /0 /CSD get_res sepcs
1 sep
ef
.14 lw
1362 538.5 mo
1703.25 538.5 li
1703.25 726.75 li
1362 726.75 li
1362 538.5 li
cp
1362.75 726 mo
1362.75 726 li
1702.5 726 li
1702.5 539.25 li
1362.75 539.25 li
1362.75 726 li
cp
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TMYULW+VERDANA gcheck setglobal} if
1 8058 73 <0001004400000312061e001800f0b90010fff0b40c0c42550fb8fff0407d
0c0c42551a400f0f02551a400d0d0255081439147505030000043f15000b
0e3e0811050d080009400902090f090e00080b080b0b42550b080d0d4255
0b100c0c42550b0c090902550b0c0c0c02550b06090906550b0c0c0c0655
0b010d0d06550b1a0f11000e400d10370e16101002550e200f0f02550e0c
090902550eb8fff6400b0c0c02550e2e0d0d02550eb8ffee400b0f0f0655
0e12090906550eb8fffb400d0c0c06550e200d0d06550e891910f62b2b2b
2b2b2b2b2b2b2b323232fd2b2b2b2b2b2b2b2b322f12392f2f5d003f3f33
fd323ffd322f3130015d2b2b2b2b01232626232206151521152111231123
35333534363332161703120a1f6426796d0153feb3bc7f7fc6bb3f652a05
5e09136b8c269efc4103bf9e25c7d50c0800>TMYULW+VERDANA AddT42Char 
TMYULW+VERDANA /CharStrings get begin
/f 73 def
end
TMYULW+VERDANA /Encoding get
dup 102 /f put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/TMYULW+VERDANA*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two 15{/.notdef}rp /B 
/C /.notdef /E 3{/.notdef}rp /I 2{/.notdef}rp /L /M 
/.notdef /O 2{/.notdef}rp /R /S /T /.notdef /V 
/W 9{/.notdef}rp /a /b /c /d /e /f 
/.notdef /h /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t /u 2{/.notdef}rp 
/x 135{/.notdef}rp]
TMYULW+VERDANA nf
TMYULW+VERDANA*1 [35.9986 0 0 -35.9986 0 0 ]msf
1409.54 643.37 mo
(R)sh
1434.57 643.37 mo
(e)sh
1456.01 643.37 mo
(f)sh
1468.67 643.37 mo
(i)sh
1478.55 643.37 mo
(n)sh
1501.33 643.37 mo
(e)sh
1522.77 643.37 mo
(d)sh
1545.2 643.37 mo
( )sh
1557.86 643.37 mo
(i)sh
1567.74 643.37 mo
(n)sh
1590.52 643.37 mo
(d)sh
1612.94 643.37 mo
(e)sh
1634.39 643.37 mo
(x)sh
1362.75 1060.5 mo
1702.5 1060.5 li
1702.5 873.75 li
1362.75 873.75 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1362 873 mo
1703.25 873 li
1703.25 1061.25 li
1362 1061.25 li
1362 873 li
cp
1362.75 1060.5 mo
1362.75 1060.5 li
1702.5 1060.5 li
1702.5 873.75 li
1362.75 873.75 li
1362.75 1060.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
ef
1362 873 mo
1703.25 873 li
1703.25 1061.25 li
1362 1061.25 li
1362 873 li
cp
1362.75 1060.5 mo
1362.75 1060.5 li
1702.5 1060.5 li
1702.5 873.75 li
1362.75 873.75 li
1362.75 1060.5 li
cp
@
TMYULW+VERDANA*1 [35.9986 0 0 -35.9986 0 0 ]msf
1407.21 977.86 mo
(R)sh
1432.24 977.86 mo
(e)sh
1453.68 977.86 mo
(r)sh
1469.05 977.86 mo
(a)sh
1490.67 977.86 mo
(n)sh
1513.45 977.86 mo
(k)sh
1534.75 977.86 mo
( )sh
1547.41 977.86 mo
(m)sh
1582.42 977.86 mo
(o)sh
1604.27 977.86 mo
(d)sh
1626.7 977.86 mo
(e)sh
1648.14 977.86 mo
(l)sh
1487.25 1132.5 mo
1519.5 1100.25 li
1551.75 1132.5 li
1536 1132.5 li
1536 1202.25 li
1503.75 1202.25 li
1503.75 1132.5 li
1487.25 1132.5 li
cp
.132174 .451331 .911681 0 cmyk
ef
1490.25 483.75 mo
1506 483.75 li
1506 414 li
1538.25 414 li
1538.25 483.75 li
1554.75 483.75 li
1522.5 516 li
1490.25 483.75 li
cp
ef
1881 798 mo
1913.25 798 li
1913.25 781.5 li
1945.5 813.75 li
1913.25 846 li
1913.25 830.25 li
1881 830.25 li
1881 798 li
cp
ef
2031.75 889.5 mo
2234.25 889.5 li
2234.25 686.25 li
2031.75 686.25 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
2031 686.25 mo
2282.25 686.25 li
2282.25 889.5 li
2031 889.5 li
2031 686.25 li
cp
2031.75 889.5 mo
2031.75 888.75 li
2281.5 888.75 li
2280.75 889.5 li
2280.75 686.25 li
2281.5 687 li
2031.75 687 li
2031.75 686.25 li
2031.75 889.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
ef
2031 686.25 mo
2282.25 686.25 li
2282.25 889.5 li
2031 889.5 li
2031 686.25 li
cp
2031.75 889.5 mo
2031.75 888.75 li
2281.5 888.75 li
2280.75 889.5 li
2280.75 686.25 li
2281.5 687 li
2031.75 687 li
2031.75 686.25 li
2031.75 889.5 li
cp
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TMYULW+VERDANA gcheck setglobal} if
1 1930 39 <000200c8000005b205d1000e001d00d54015391249126902680d04163408
03173407087600010fb8fff840130b0b42550f15000a1010025500060b0b
025500b8ffe2b40f0f025500b8fff4b40909025500b8ffeab40c0c025500
b8fff440250d0d065500741f0f1f2f1f401f601f0417080b0b425517040c
0d42551714070e1010025507b8fffcb40b0b025507b8ffda400b0f0f0255
07080909025507b8ffeeb40c0c025507b8ffeab40d0d025507b8fff1b40d
0d065507b8fff1b60c0c0655076c1e10f62b2b2b2b2b2b2b2bed2b2b5d10
f62b2b2b2b2b2bed2b5d003fed3fed3130015d0114020706062321112132
0417161207342627262623231133323637363605b2b19366fbcdfe880174
da01015998aacf7a7958c68ababa8fd5596f6f02e7cbfeb65b3f3805d13f
375ffec4d6aff0453227fb832a3947e8>TMYULW+VERDANA AddT42Char 
1 2452 41 <000100c80000047f05d1000900a9b2053502b8ffc040150f0f0255020207
01350803070800034f0b02030300b8ffd440260d0d065500640b0f0b0102
05080b0b425505040c0d425505010c0c06550514070e1010025507b8fffc
b40b0b025507b8ffda400b0f0f025507080909025507b8ffeeb40c0c0255
07b8ffeab40d0d025507b8ffe0b40d0d065507b8ffecb60c0c0655076c0a
10f62b2b2b2b2b2b2b2bfd2b2b2b325d10f42b322f5d003f3fed12392f2b
ed313001211121152111231121047ffd0f0287fd79c603b70521fe5cb0fd
3305d100>TMYULW+VERDANA AddT42Char 
1 3852 52 <00020073fe7705f805f00025003100ff40470b0c0b120418041d190c1912
1518161d5c0b590d59115c1353175719571d742010551f651f751d742d04
25252135030b29341e0609760979150215022f34090a1e130600337326b8
fffcb40c0c425526b8fff8b40b0b425526b8fffc400e0c0c065526151b00
09061d030f1bb8ffe8b40d0d42551bb8ffe6b4090902551bb8ffe2b40c0c
02551bb8fff040400d0d02551b73330f33010f331f333f33032c040c0c42
552c080b0b42552c150f080c0c42550f0c0b0b42550f120b0b02550f1609
0902550f040c0c06550f683210f62b2b2b2b2bed2b2b5d5d10e62b2b2b2b
1117393210ed2b2b2be62f2fed003fed3f5d123939ed3ffd322f31305d01
5d0106062322262706062322242726023534123736243332161716121510
02071616333236373303100023220011100033320005f83c753daed30918
2d159dfeff5a5a61605c5801059aa0ff595b61dfbc0464842971181becfe
fce1e3fefd0108dede0107fe930f0dbfb204036863630120b9b601216762
68696164fedeb8feeffe8a4b727e190a039f0122013bfec5fedefedbfec9
0137>TMYULW+VERDANA AddT42Char 
1 8376 74 <0002006cfe590443047c002300300182402d3d133e2a322c3a3044094b13
4c2a422c4b305b015d055a166a016c056a167c0570201122051221152840
1e0407b8ffc0b40d0d425507b8ffc0b40d0d025507b8ffc040150f0f0655
07070b40030d2e4115070f060106212412b8fff8b40b0b425512b8fff8b4
0d0d425512b8fff0400b0c0c425532400f0f025512b8fff4b40909025512
b8fff4b40c0c025512b8fff4400a0c0c0655121a00061800b8fff6407510
10025500080b0b025500100f0f0255000c09090255002a0c0c0255000a0d
0d0255001a0f0f0655000f0c0c0655000f0d0d06550092321f323f32022b
080b0b42552b040d0d42552b100c0c42552b080c0c02552b0c0c0c06552b
1b180c0b0b425518080d0d4255180a0c0c425518100b0b025518b8fffe40
250f0f0255181609090255180c0c0c025518060d0d0255180c0c0c065518
060d0d065518853110f42b2b2b2b2b2b2b2b2b2bed2b2b2b2b2b5d10e42b
2b2b2b2b2b2b2b2b113910fd2b2b2b2b2b2b2b32322f5d003fed3fed332f
2b2b2b3fed1239393f31305d251000212226273533161633323637363635
350606232202113436373636333216173733031126262322061514163332
360443fefefef459a9520a2ec864607e23231e559b78c8eb514641ba5c61
83490cb0bc4b81409bb2849952a57ffee4fef61917c012352e29276e4466
44430121010790d14c474f272830fcd60261221dd0c6bcc23f00>TMYULW+VERDANA AddT42Char 
1 14276 92 <0001003dfe64047f045d000700c2b90007fffe400b0b0b425505020b0b42
5507b8fffe400b0c0d425505020c0d425507b8fff8404b0c0c425505080c
0c4255040634064406500660067006060903070519031705460149035800
570179030902071a000100051a04030449004604020003020405020c0268
0101010203030400b8ffc040220910370c001c004a006a007a0005008d09
0f0901030413044504650475040504820810e45d5d10f65d2b1117395d2f
003f3f1239393130015d8710fd8710fdc0015d005d012b2b2b2b2b2b0101
231301330101047ffd74c9d0fe43cc0157015a045dfa0701d20427fcc403
3c00>TMYULW+VERDANA AddT42Char 
TMYULW+VERDANA /CharStrings get begin
/D 39 def
/F 41 def
/Q 52 def
/g 74 def
/y 92 def
end
TMYULW+VERDANA /Encoding get
dup 68 /D put
dup 70 /F put
dup 81 /Q put
dup 103 /g put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/TMYULW+VERDANA*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two 15{/.notdef}rp /B 
/C /D /E /F 2{/.notdef}rp /I 2{/.notdef}rp /L 
/M /.notdef /O /.notdef /Q /R /S /T 
/.notdef /V /W 9{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /.notdef /r /s /t 
/u 2{/.notdef}rp /x /y 134{/.notdef}rp]
TMYULW+VERDANA nf
TMYULW+VERDANA*1 [35.9986 0 0 -35.9986 0 0 ]msf
2111.43 789.15 mo
(F)sh
2132.12 789.15 mo
(i)sh
2142 789.15 mo
(n)sh
2164.78 789.15 mo
(a)sh
2186.4 789.15 mo
(l)sh
2196.28 789.15 mo
( )sh
2088.75 832.35 mo
(r)sh
2104.11 832.35 mo
(e)sh
2125.56 832.35 mo
(s)sh
2144.31 832.35 mo
(u)sh
2167.09 832.35 mo
(l)sh
2176.97 832.35 mo
(t)sh
2191.16 832.35 mo
(s)sh
TMYULW+VERDANA*1 [39.9586 0 0 -39.9586 0 0 ]msf
204.8 1158.71 mo
(Q)sh
236.252 1158.71 mo
(u)sh
261.538 1158.71 mo
(e)sh
285.341 1158.71 mo
(r)sh
302.394 1158.71 mo
(y)sh
326.042 1158.71 mo
( )sh
340.089 1158.71 mo
(e)sh
363.893 1158.71 mo
(x)sh
387.54 1158.71 mo
(p)sh
412.436 1158.71 mo
(a)sh
436.435 1158.71 mo
(n)sh
461.721 1158.71 mo
(s)sh
482.539 1158.71 mo
(i)sh
493.504 1158.71 mo
(o)sh
517.757 1158.71 mo
(n)sh
1354.42 115.37 mo
(D)sh
1385.21 115.37 mo
(a)sh
1409.21 115.37 mo
(t)sh
1424.95 115.37 mo
(a)sh
1448.95 115.37 mo
( )sh
1463 115.37 mo
(p)sh
1487.9 115.37 mo
(r)sh
1504.95 115.37 mo
(e)sh
1528.75 115.37 mo
(p)sh
1553.65 115.37 mo
(r)sh
1570.7 115.37 mo
(o)sh
1594.95 115.37 mo
(c)sh
1615.77 115.37 mo
(e)sh
1639.57 115.37 mo
(s)sh
1660.39 115.37 mo
(s)sh
1681.21 115.37 mo
(i)sh
1692.17 115.37 mo
(n)sh
1717.46 115.37 mo
(g)sh
1364.43 1555.57 mo
(T)sh
1389.05 1555.57 mo
(r)sh
1406.11 1555.57 mo
(a)sh
1430.1 1555.57 mo
(i)sh
1441.07 1555.57 mo
(n)sh
1466.35 1555.57 mo
(i)sh
1477.32 1555.57 mo
(n)sh
1502.61 1555.57 mo
(g)sh
1527.5 1555.57 mo
( )sh
1541.55 1555.57 mo
(r)sh
1558.6 1555.57 mo
(e)sh
1582.41 1555.57 mo
(r)sh
1599.46 1555.57 mo
(a)sh
1623.46 1555.57 mo
(n)sh
1648.74 1555.57 mo
(k)sh
1672.39 1555.57 mo
( )sh
1686.44 1555.57 mo
(m)sh
1725.3 1555.57 mo
(o)sh
1749.56 1555.57 mo
(d)sh
1774.45 1555.57 mo
(e)sh
1798.26 1555.57 mo
(l)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/TMYULW+VERDANA*1 uf
/TMYULW+VERDANA uf
/PBAAAA+VERDANA uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
